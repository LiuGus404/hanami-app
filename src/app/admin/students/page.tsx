'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Checkbox } from '@/components/ui/checkbox'
import PopupSelect from '@/components/ui/PopupSelect'
import { supabase } from '@/lib/supabase'
import { useRouter, useSearchParams } from 'next/navigation'
import StudentCard from '@/components/ui/StudentCard'
import { BookOpen, CalendarClock, Star, LayoutGrid, List, ChevronLeft, ChevronRight, Settings2 } from 'lucide-react'
import { useUser } from '@/hooks/useUser'
import { useParams } from 'next/navigation'

export default function StudentManagementPage() {
  const searchParams = useSearchParams()
  const filterParam = searchParams.get('filter')
  
  const [selectedStudents, setSelectedStudents] = useState<string[]>([])
  const [selectedCourses, setSelectedCourses] = useState<string[]>(() => {
    if (filterParam === 'regular') return ['Â∏∏Ë¶è']
    if (filterParam === 'trial') return ['Ë©¶Â†Ç']
    return []
  })
  const [dropdownOpen, setDropdownOpen] = useState(false)
  const [students, setStudents] = useState<any[]>([])
  const [selectedWeekdays, setSelectedWeekdays] = useState<string[]>([])
  const [weekdayDropdownOpen, setWeekdayDropdownOpen] = useState(false)
  const [selectedLessonFilter, setSelectedLessonFilter] = useState<'all' | 'gt2' | 'lte2' | 'custom'>(() => {
    if (filterParam === 'lastLesson') return 'custom'
    return 'all'
  })
  const [customLessonCount, setCustomLessonCount] = useState<number | ''>(() => {
    if (filterParam === 'lastLesson') return 1
    return ''
  })
  const [lessonDropdownOpen, setLessonDropdownOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [displayMode, setDisplayMode] = useState<'grid' | 'list'>('grid')
  const [pageSize, setPageSize] = useState(20)
  const [currentPage, setCurrentPage] = useState(1)
  const [pageSizeDropdownOpen, setPageSizeDropdownOpen] = useState(false)
  const [columnSelectorOpen, setColumnSelectorOpen] = useState(false)
  const [selectedColumns, setSelectedColumns] = useState<string[]>([
    'student_oid',
    'full_name',
    'student_age',
    'student_type',
    'course_type',
    'regular_weekday',
    'regular_timeslot',
    'remaining_lessons',
    'contact_number',
    'health_notes'
  ])

  const router = useRouter()
  const { user, loading: userLoading } = useUser()
  const { id } = useParams()

  console.log('user:', user, 'userLoading:', userLoading, 'id:', id)

  // Âü∫Êú¨Ê¨Ñ‰ΩçÔºàÂº∑Âà∂È°ØÁ§∫Ôºå‰ΩÜ‰∏çÂú®ÈÅ∏ÂñÆ‰∏≠Ôºâ
  // { label: 'Â≠∏ÁîüÁ∑®Ëôü', value: 'student_oid' },
  // { label: 'ÂßìÂêç', value: 'full_name' },
  // { label: 'Âπ¥ÈΩ°', value: 'student_age' },
  const columnOptions = [
    { label: 'ÊÄßÂà•', value: 'gender' },
    { label: 'ÁîüÊó•', value: 'student_dob' },
    { label: 'È°ûÂûã', value: 'student_type' },
    { label: 'Ë™≤Á®ã', value: 'course_type' },
    { label: 'Â≠∏Ê†°', value: 'school' },
    { label: 'Âú∞ÂùÄ', value: 'address' },
    { label: 'Ë≤†Ë≤¨ËÄÅÂ∏´', value: 'student_teacher' },
    { label: 'ÂÅèÂ•Ω', value: 'student_preference' },
    { label: '‰∏äË™≤Êó•', value: 'regular_weekday' },
    { label: '‰∏äË™≤ÊôÇÈñì', value: 'regular_timeslot' },
    { label: 'Ââ©È§òÂ†ÇÊï∏', value: 'remaining_lessons' },
    { label: 'ÂÖ•Â≠∏Êó•Êúü', value: 'started_date' },
    { label: 'Â†±ËÆÄÊôÇÈï∑', value: 'duration_months' },
    { label: 'ËÅØÁµ°ÈõªË©±', value: 'contact_number' },
    { label: 'ÂÆ∂Èï∑ Email', value: 'parent_email' },
    { label: 'ÂÅ•Â∫∑ÂÇôË®ª', value: 'health_notes' },
    { label: 'Ë©¶Â†ÇÊó•Êúü', value: 'lesson_date' },
    { label: 'Ë©¶Â†ÇÊôÇÈñì', value: 'actual_timeslot' }
  ]

  useEffect(() => {
    if (!user && !userLoading) {
      router.push('/login')
      return
    }
    if (user && !['admin', 'manager'].includes(user.role)) {
      router.push('/')
      return
    }

    const checkAndFetch = async () => {
      const { data: sessionData } = await supabase.auth.getSession()
      const user = sessionData?.session?.user

      if (!user) {
        router.push('/admin/login')
        return
      }

      if (user.user_metadata?.role !== 'admin') {
        alert('ÁÑ°Ê¨äÈôêÂ≠òÂèñÔºåÂÉÖÈôêÁÆ°ÁêÜÂì°ÁôªÂÖ•')
        await supabase.auth.signOut()
        router.push('/admin/login')
        return
      }

      try {
        // Áç≤ÂèñÂ∏∏Ë¶èÂ≠∏ÁîüÊï∏Êìö
        const { data: studentData, error: studentError } = await supabase
          .from('Hanami_Students')
          .select('id, full_name, student_age, student_preference, course_type, remaining_lessons, regular_weekday, gender, student_type, student_oid, contact_number, regular_timeslot, health_notes')

        // Áç≤ÂèñË©¶Â†ÇÂ≠∏ÁîüÊï∏Êìö
        const { data: trialStudentData, error: trialStudentError } = await supabase
          .from('hanami_trial_students')
          .select('*')

        if (studentError) {
          console.error('Error fetching regular students:', studentError)
          return
        }

        if (trialStudentError) {
          console.error('Error fetching trial students:', trialStudentError)
          return
        }

        // ËôïÁêÜÂ∏∏Ë¶èÂ≠∏ÁîüÊï∏Êìö
        const regularStudents = studentData || []

        // ËôïÁêÜË©¶Â†ÇÂ≠∏ÁîüÊï∏Êìö
        const trialStudents = (trialStudentData || []).map((trial) => {
          // Ë®àÁÆóÂ≠∏ÁîüÂπ¥ÈΩ°
          let student_age = 0
          if (trial.student_dob) {
            const dob = new Date(trial.student_dob)
            const now = new Date()
            let years = now.getFullYear() - dob.getFullYear()
            let months = now.getMonth() - dob.getMonth()
            if (months < 0) {
              years -= 1
              months += 12
            }
            student_age = years * 12 + months
          }

          // Ë®àÁÆóÊòüÊúü
          let weekday = null
          if (trial.lesson_date) {
            const trialDate = new Date(trial.lesson_date)
            const hkTime = new Date(trialDate.getTime() + 8 * 60 * 60 * 1000)
            weekday = hkTime.getDay().toString()
          }

          return {
            id: trial.id,
            full_name: trial.full_name,
            student_age,
            student_preference: trial.student_preference || null,
            course_type: trial.course_type || null,
            remaining_lessons: trial.remaining_lessons ?? null,
            regular_weekday: weekday !== null ? [weekday] : [],
            weekday: weekday,
            gender: trial.gender || null,
            student_type: 'Ë©¶Â†Ç',
            lesson_date: trial.lesson_date,
            actual_timeslot: trial.actual_timeslot,
            student_oid: trial.student_oid || null,
            contact_number: trial.contact_number || null,
            regular_timeslot: trial.regular_timeslot || null,
            health_notes: trial.health_notes || null
          }
        })

        // Âêà‰ΩµÊâÄÊúâÂ≠∏ÁîüÊï∏Êìö
        const allStudents = [...regularStudents, ...trialStudents]
        console.log('üßí ÂÖ®ÈÉ®Â≠∏ÁîüË≥áÊñôÔºö', allStudents)
        setStudents(allStudents)
      } catch (err) {
        console.error('Error:', err)
      }
    }

    checkAndFetch()
  }, [])

  const filteredStudents = students.filter((student) => {
    const type = student.course_type?.trim() || ''
    
    // ËôïÁêÜÂ∏∏Ë¶èÂ≠∏ÁîüÁöÑÊòüÊúü
    const regularWeekdays = Array.isArray(student.regular_weekday)
      ? student.regular_weekday.map((d: string | number) => d.toString())
      : typeof student.regular_weekday === 'string'
        ? [student.regular_weekday]
        : typeof student.regular_weekday === 'number'
          ? [student.regular_weekday.toString()]
          : []

    // ËôïÁêÜË©¶Â†ÇÂ≠∏ÁîüÁöÑÊòüÊúü
    const trialWeekday = student.weekday?.toString()

    const courseMatch =
      selectedCourses.length === 0 ||
      selectedCourses.some((selected) => {
        if (['ÈãºÁê¥', 'Èü≥Ê®ÇÂ∞àÊ≥®Âäõ', 'Êú™ÂàÜÁè≠'].includes(selected)) {
          return type === selected || (!type && selected === 'Êú™ÂàÜÁè≠')
        } else if (selected === 'Â∏∏Ë¶è') {
          return student.student_type !== 'Ë©¶Â†Ç'
        } else if (selected === 'Ë©¶Â†Ç') {
          return student.student_type === 'Ë©¶Â†Ç'
        }
        return false
      })

    const weekdayMatch =
      selectedWeekdays.length === 0 ||
      regularWeekdays.some((day: string) => selectedWeekdays.includes(day)) ||
      (trialWeekday && selectedWeekdays.includes(trialWeekday))

    const lessonMatch =
      selectedLessonFilter === 'all'
        ? true
        : selectedLessonFilter === 'gt2'
          ? Number(student.remaining_lessons) > 2
          : selectedLessonFilter === 'lte2'
            ? Number(student.remaining_lessons) <= 2
            : typeof customLessonCount === 'number'
              ? Number(student.remaining_lessons) === customLessonCount
              : true

    const nameMatch = student.full_name?.includes(searchTerm.trim())

    return courseMatch && weekdayMatch && lessonMatch && nameMatch
  })

  // Â∞çË©¶Â†ÇÂ≠∏ÁîüÈÄ≤Ë°åÊéíÂ∫è
  const sortedStudents = [...filteredStudents].sort((a, b) => {
    if (selectedCourses.includes('Ë©¶Â†Ç')) {
      const dateA = a.lesson_date ? new Date(a.lesson_date).getTime() : 0
      const dateB = b.lesson_date ? new Date(b.lesson_date).getTime() : 0
      return dateB - dateA // ÂæûÊñ∞Âà∞ËàäÊéíÂ∫è
    }
    return 0
  })

  const toggleStudent = (id: string) => {
    setSelectedStudents((prev) =>
      prev.includes(id) ? prev.filter((sid) => sid !== id) : [...prev, id]
    )
  }

  return (
    <div className="min-h-screen bg-[#FFFCEB] px-4 py-6 font-['Quicksand',_sans-serif]">
      <div className="max-w-5xl mx-auto">
        <h1 className="text-2xl font-bold text-[#2B3A3B] mb-2">Â≠∏ÁîüË≥áÊñôÁÆ°ÁêÜ</h1>

        <div className="mb-4">
          <input
            type="text"
            placeholder="ÊêúÂ∞ãÂ≠∏ÁîüÂßìÂêç"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full max-w-sm border border-[#EADBC8] rounded-full px-4 py-2 text-sm text-[#2B3A3B] placeholder-[#aaa]"
          />
        </div>

        <div className="flex justify-between items-center mb-4">
          <div className="flex overflow-x-auto gap-2 pb-3">
            <div className="mb-4">
              <button
                onClick={() => setDropdownOpen(true)}
                className="bg-white border border-[#EADBC8] text-sm px-4 py-2 rounded-full text-[#2B3A3B] shadow-sm"
              >
                ÁØ©ÈÅ∏Ë™≤Á®ã
              </button>
              {dropdownOpen && (
                <PopupSelect
                  title="ÁØ©ÈÅ∏Ë™≤Á®ã"
                  options={[
                    { label: 'ÈãºÁê¥', value: 'ÈãºÁê¥' },
                    { label: 'Èü≥Ê®ÇÂ∞àÊ≥®Âäõ', value: 'Èü≥Ê®ÇÂ∞àÊ≥®Âäõ' },
                    { label: 'Êú™ÂàÜÁè≠', value: 'Êú™ÂàÜÁè≠' },
                    { label: 'Â∏∏Ë¶è', value: 'Â∏∏Ë¶è' },
                    { label: 'Ë©¶Â†Ç', value: 'Ë©¶Â†Ç' },
                  ]}
                  selected={selectedCourses}
                  onChange={(value) => {
                    if (Array.isArray(value)) {
                      setSelectedCourses(value);
                    } else if (typeof value === 'string') {
                      setSelectedCourses([value]);
                    }
                  }}
                  onConfirm={() => { console.log('Áà∂Â±§ confirm'); setDropdownOpen(false) }}
                  onCancel={() => { console.log('Áà∂Â±§ cancel'); setDropdownOpen(false) }}
                />
              )}
            </div>

            <div className="mb-4">
              <button
                onClick={() => setWeekdayDropdownOpen(true)}
                className="bg-white border border-[#EADBC8] text-sm px-4 py-2 rounded-full text-[#2B3A3B] shadow-sm"
              >
                ÁØ©ÈÅ∏ÊòüÊúü
              </button>
              {weekdayDropdownOpen && (
                <PopupSelect
                  title="ÁØ©ÈÅ∏ÊòüÊúü"
                  options={[
                    { label: 'ÊòüÊúü‰∏Ä', value: '1' },
                    { label: 'ÊòüÊúü‰∫å', value: '2' },
                    { label: 'ÊòüÊúü‰∏â', value: '3' },
                    { label: 'ÊòüÊúüÂõõ', value: '4' },
                    { label: 'ÊòüÊúü‰∫î', value: '5' },
                    { label: 'ÊòüÊúüÂÖ≠', value: '6' },
                    { label: 'ÊòüÊúüÊó•', value: '0' },
                  ]}
                  selected={selectedWeekdays}
                  onChange={setSelectedWeekdays}
                  onConfirm={() => { console.log('Áà∂Â±§ confirm'); setWeekdayDropdownOpen(false) }}
                  onCancel={() => { console.log('Áà∂Â±§ cancel'); setWeekdayDropdownOpen(false) }}
                />
              )}
            </div>

            <div className="mb-4">
              <button
                onClick={() => setLessonDropdownOpen(true)}
                className="bg-white border border-[#EADBC8] text-sm px-4 py-2 rounded-full text-[#2B3A3B] shadow-sm"
              >
                ÁØ©ÈÅ∏Â†ÇÊï∏
              </button>
              {lessonDropdownOpen && (
                <PopupSelect
                  title="ÁØ©ÈÅ∏Ââ©È§òÂ†ÇÊï∏"
                  options={[
                    { label: 'ÂÖ®ÈÉ®', value: 'all' },
                    { label: '> 2', value: 'gt2' },
                    { label: '‚â§ 2', value: 'lte2' },
                    { label: 'Ëá™Ë®ÇÊï∏Â≠ó', value: 'custom' },
                  ]}
                  selected={selectedLessonFilter}
                  onChange={(value) => setSelectedLessonFilter(value as any)}
                  onConfirm={() => { console.log('Áà∂Â±§ confirm'); setLessonDropdownOpen(false) }}
                  onCancel={() => { console.log('Áà∂Â±§ cancel'); setLessonDropdownOpen(false) }}
                  mode="single"
                />
              )}
              {selectedLessonFilter === 'custom' && (
                <input
                  type="number"
                  value={customLessonCount}
                  onChange={(e) => setCustomLessonCount(Number(e.target.value))}
                  className="ml-2 border border-[#EADBC8] rounded px-2 py-1 text-sm w-20 mt-2"
                  placeholder="Êï∏Â≠ó"
                />
              )}
            </div>

            <div className="mb-4">
              <button
                onClick={() => setDisplayMode(displayMode === 'grid' ? 'list' : 'grid')}
                className="bg-white border border-[#EADBC8] text-sm px-4 py-2 rounded-full text-[#2B3A3B] shadow-sm flex items-center gap-2"
              >
                {displayMode === 'grid' ? (
                  <>
                    <LayoutGrid className="w-4 h-4" />
                    <span>ÂúñÂç°È°ØÁ§∫</span>
                  </>
                ) : (
                  <>
                    <List className="w-4 h-4" />
                    <span>ÂàóË°®È°ØÁ§∫</span>
                  </>
                )}
              </button>
            </div>

            {(selectedCourses.length > 0 ||
              selectedWeekdays.length > 0 ||
              selectedLessonFilter !== 'all' ||
              (selectedLessonFilter === 'custom' && customLessonCount !== '')) && (
              <div className="mb-4">
                <button
                  onClick={() => {
                    setSelectedCourses([])
                    setSelectedWeekdays([])
                    setSelectedLessonFilter('all')
                    setCustomLessonCount('')
                  }}
                  className="bg-white border border-[#EADBC8] text-sm px-4 py-2 rounded-full text-[#A68A64] shadow-sm hover:bg-[#f7f3ec]"
                >
                  Ê∏ÖÈô§Ê¢ù‰ª∂
                </button>
              </div>
            )}
          </div>
        </div>

        <div className="text-sm text-gray-600 mb-2">
          È°ØÁ§∫Â≠∏ÁîüÊï∏Ôºö{sortedStudents.length}Ôºà
          {[
            selectedCourses.length > 0 && `Ë™≤Á®ãÔºö${selectedCourses.join('„ÄÅ')}`,
            selectedWeekdays.length > 0 &&
              `ÊòüÊúüÔºö${selectedWeekdays
                .map((day) => ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'][Number(day)])
                .join('„ÄÅ')}`,
            selectedLessonFilter === 'custom' && typeof customLessonCount === 'number'
              ? `Ââ©È§òÂ†ÇÊï∏ = ${customLessonCount}`
              : selectedLessonFilter === 'gt2'
              ? 'Ââ©È§òÂ†ÇÊï∏ > 2'
              : selectedLessonFilter === 'lte2'
              ? 'Ââ©È§òÂ†ÇÊï∏ ‚â§ 2'
              : null,
          ]
            .filter(Boolean)
            .join('Ôºõ') || 'ÂÖ®ÈÉ®Ê¢ù‰ª∂'}
          )
        </div>

        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center gap-2">
            <span className="text-sm text-[#2B3A3B]">ÊØèÈ†ÅÈ°ØÁ§∫Ôºö</span>
            <button
              onClick={() => setPageSizeDropdownOpen(true)}
              className="bg-white border border-[#EADBC8] text-sm px-4 py-2 rounded-full text-[#2B3A3B] shadow-sm"
            >
              {pageSize === Infinity ? 'ÂÖ®ÈÉ®' : pageSize}
            </button>
            {pageSizeDropdownOpen && (
              <PopupSelect
                title="ÈÅ∏ÊìáÈ°ØÁ§∫Êï∏Èáè"
                options={[
                  { label: '20', value: '20' },
                  { label: '50', value: '50' },
                  { label: '100', value: '100' },
                  { label: 'ÂÖ®ÈÉ®', value: 'all' },
                ]}
                selected={pageSize.toString()}
                onChange={(value) => {
                  setPageSize(value === 'all' ? Infinity : Number(value))
                  setCurrentPage(1)
                }}
                onConfirm={() => { console.log('Áà∂Â±§ confirm'); setPageSizeDropdownOpen(false) }}
                onCancel={() => { console.log('Áà∂Â±§ cancel'); setPageSizeDropdownOpen(false) }}
                mode="single"
              />
            )}
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={() => setColumnSelectorOpen(true)}
              className="bg-white border border-[#EADBC8] text-sm px-4 py-2 rounded-full text-[#2B3A3B] shadow-sm flex items-center gap-2"
            >
              <Settings2 className="w-4 h-4" />
              <span>È°ØÁ§∫Ê¨Ñ‰Ωç</span>
            </button>
            {columnSelectorOpen && (
              <PopupSelect
                title="ÈÅ∏ÊìáÈ°ØÁ§∫Ê¨Ñ‰Ωç"
                options={columnOptions}
                selected={selectedColumns}
                onChange={(value) => {
                  // Á¢∫‰øùÂü∫Êú¨Ê¨Ñ‰ΩçÂßãÁµÇË¢´ÈÅ∏‰∏≠
                  const newSelected = Array.isArray(value) ? value : [value]
                  if (!newSelected.includes('student_oid')) newSelected.push('student_oid')
                  if (!newSelected.includes('full_name')) newSelected.push('full_name')
                  if (!newSelected.includes('student_age')) newSelected.push('student_age')
                  setSelectedColumns(newSelected)
                }}
                onConfirm={() => { console.log('Áà∂Â±§ confirm'); setColumnSelectorOpen(false) }}
                onCancel={() => { console.log('Áà∂Â±§ cancel'); setColumnSelectorOpen(false) }}
                mode="multi"
              />
            )}
            <button
              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
              disabled={currentPage === 1}
              className={`p-2 rounded-full ${
                currentPage === 1
                  ? 'text-gray-300 cursor-not-allowed'
                  : 'text-[#2B3A3B] hover:bg-[#FFFCEB]'
              }`}
            >
              <ChevronLeft className="w-5 h-5" />
            </button>
            <span className="text-sm text-[#2B3A3B]">
              Á¨¨ {currentPage} È†ÅÔºåÂÖ± {Math.ceil(sortedStudents.length / pageSize)} È†Å
            </span>
            <button
              onClick={() => setCurrentPage(prev => Math.min(Math.ceil(sortedStudents.length / pageSize), prev + 1))}
              disabled={currentPage === Math.ceil(sortedStudents.length / pageSize)}
              className={`p-2 rounded-full ${
                currentPage === Math.ceil(sortedStudents.length / pageSize)
                  ? 'text-gray-300 cursor-not-allowed'
                  : 'text-[#2B3A3B] hover:bg-[#FFFCEB]'
              }`}
            >
              <ChevronRight className="w-5 h-5" />
            </button>
          </div>
        </div>

        {console.log('üëÄ ÁØ©ÈÅ∏ÂæåÁöÑÂ≠∏ÁîüÂàóË°®:', sortedStudents)}
        {displayMode === 'grid' ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            {sortedStudents
              .slice((currentPage - 1) * pageSize, currentPage * pageSize)
              .map((student) => {
                const ageInMonths = Number(student.student_age) || 0
                const years = Math.floor(ageInMonths / 12)
                const months = ageInMonths % 12

                if (!student.gender) {
                  console.warn(`Â≠∏Áîü ${student.full_name || student.id} Áº∫Â∞ë genderÔºåavatar È†êË®≠ÁÇ∫ boy.png`)
                }

                const isTrialStudent = student.student_type === 'Ë©¶Â†Ç'
                const cardFields = isTrialStudent
                  ? [
                      {
                        icon: CalendarClock,
                        label: 'Âπ¥ÈΩ°',
                        value: ageInMonths ? `${years} Ê≠≤${months > 0 ? ` ${months} ÂÄãÊúà` : ''}` : '‚Äî',
                      },
                      {
                        icon: BookOpen,
                        label: 'Ë™≤Á®ã',
                        value: student.course_type || 'Êú™ÂàÜÁè≠',
                      },
                      {
                        icon: CalendarClock,
                        label: 'Ë©¶Â†ÇÊôÇÈñì',
                        value: student.lesson_date && student.actual_timeslot
                          ? `${new Date(student.lesson_date).toLocaleDateString('zh-HK')} ${student.actual_timeslot}`
                          : '‚Äî',
                      },
                    ]
                  : [
                      {
                        icon: CalendarClock,
                        label: 'Âπ¥ÈΩ°',
                        value: ageInMonths ? `${years} Ê≠≤${months > 0 ? ` ${months} ÂÄãÊúà` : ''}` : '‚Äî',
                      },
                      {
                        icon: BookOpen,
                        label: 'Ë™≤Á®ã',
                        value: student.course_type || 'Êú™ÂàÜÁè≠',
                      },
                      {
                        icon: Star,
                        label: 'Ââ©È§òÂ†ÇÊï∏',
                        value: `${student.remaining_lessons ?? '‚Äî'} Â†Ç`,
                      },
                    ]

                return (
                  <motion.div
                    key={student.id}
                    initial={false}
                    animate={{
                      scale: selectedStudents.includes(student.id) ? 1.03 : 1,
                      boxShadow: selectedStudents.includes(student.id)
                        ? '0 4px 20px rgba(252, 213, 139, 0.4)'
                        : 'none',
                    }}
                    whileTap={{ scale: 0.98 }}
                    transition={{ type: 'spring', stiffness: 300, damping: 20 }}
                    className="cursor-pointer relative"
                    onClick={() => toggleStudent(student.id)}
                  >
                    <div
                      className="absolute top-2 left-2 z-10"
                      onClick={(e) => {
                        e.stopPropagation()
                        router.push(`/admin/students/${student.id}`)
                      }}
                    >
                      <img
                        src="/icons/edit-pencil.png"
                        alt="Á∑®ËºØ"
                        className="w-7 h-7 cursor-pointer hover:scale-110 transition-transform"
                      />
                    </div>
                    {selectedStudents.includes(student.id) && (
                      <motion.div
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        className="absolute top-2 right-2"
                      >
                        <img src="/icons/leaf-sprout.png" alt="ÈÅ∏Âèñ" className="w-12 h-12" />
                      </motion.div>
                    )}
                    <StudentCard
                      gender={student.gender}
                      name={student.full_name || 'Êú™ÂëΩÂêçÂ≠∏Áîü'}
                      selected={selectedStudents.includes(student.id)}
                      avatar={
                        student.gender === 'male'
                          ? '/boy.png'
                          : student.gender === 'female'
                            ? '/girl.png'
                            : '/boy.png'
                      }
                      fields={cardFields}
                      studentType={student.student_type}
                      isTrialStudent={isTrialStudent}
                    />
                  </motion.div>
                )
              })}
          </div>
        ) : (
          <div className="bg-white rounded-xl border border-[#EADBC8] overflow-hidden">
            <table className="w-full">
              <thead>
                <tr className="bg-[#FFFCEB] border-b border-[#EADBC8]">
                  <th className="w-12 p-3 text-left text-sm font-medium text-[#2B3A3B]">
                    <Checkbox
                      checked={selectedStudents.length === sortedStudents.length}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setSelectedStudents(sortedStudents.map(s => s.id))
                        } else {
                          setSelectedStudents([])
                        }
                      }}
                    />
                  </th>
                  <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">#</th>
                  {selectedColumns.includes('student_oid') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Â≠∏ÁîüÁ∑®Ëôü</th>
                  )}
                  {selectedColumns.includes('full_name') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">ÂßìÂêç</th>
                  )}
                  {selectedColumns.includes('student_age') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Âπ¥ÈΩ°</th>
                  )}
                  {selectedColumns.includes('gender') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">ÊÄßÂà•</th>
                  )}
                  {selectedColumns.includes('student_dob') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">ÁîüÊó•</th>
                  )}
                  {selectedColumns.includes('student_type') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">È°ûÂûã</th>
                  )}
                  {selectedColumns.includes('course_type') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Ë™≤Á®ã</th>
                  )}
                  {selectedColumns.includes('school') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Â≠∏Ê†°</th>
                  )}
                  {selectedColumns.includes('address') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Âú∞ÂùÄ</th>
                  )}
                  {selectedColumns.includes('student_teacher') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Ë≤†Ë≤¨ËÄÅÂ∏´</th>
                  )}
                  {selectedColumns.includes('student_preference') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">ÂÅèÂ•Ω</th>
                  )}
                  {selectedColumns.includes('regular_weekday') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">‰∏äË™≤Êó•</th>
                  )}
                  {selectedColumns.includes('regular_timeslot') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">‰∏äË™≤ÊôÇÈñì</th>
                  )}
                  {selectedColumns.includes('remaining_lessons') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Ââ©È§òÂ†ÇÊï∏</th>
                  )}
                  {selectedColumns.includes('started_date') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">ÂÖ•Â≠∏Êó•Êúü</th>
                  )}
                  {selectedColumns.includes('duration_months') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Â†±ËÆÄÊôÇÈï∑</th>
                  )}
                  {selectedColumns.includes('contact_number') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">ËÅØÁµ°ÈõªË©±</th>
                  )}
                  {selectedColumns.includes('parent_email') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">ÂÆ∂Èï∑ Email</th>
                  )}
                  {selectedColumns.includes('health_notes') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">ÂÅ•Â∫∑ÂÇôË®ª</th>
                  )}
                  {selectedColumns.includes('lesson_date') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Ë©¶Â†ÇÊó•Êúü</th>
                  )}
                  {selectedColumns.includes('actual_timeslot') && (
                    <th className="p-3 text-left text-sm font-medium text-[#2B3A3B]">Ë©¶Â†ÇÊôÇÈñì</th>
                  )}
                </tr>
              </thead>
              <tbody>
                {sortedStudents
                  .slice((currentPage - 1) * pageSize, currentPage * pageSize)
                  .map((student, index) => {
                    const ageInMonths = Number(student.student_age) || 0
                    const years = Math.floor(ageInMonths / 12)
                    const months = ageInMonths % 12
                    const weekdays = ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠']
                    const regularWeekdays = Array.isArray(student.regular_weekday)
                      ? student.regular_weekday.map(d => weekdays[Number(d)]).join('„ÄÅ')
                      : typeof student.regular_weekday === 'string'
                        ? weekdays[Number(student.regular_weekday)]
                        : '‚Äî'

                    return (
                      <tr
                        key={student.id}
                        className={`border-b border-[#EADBC8] hover:bg-[#FFFCEB] cursor-pointer ${
                          selectedStudents.includes(student.id) ? 'bg-[#FFFCEB]' : ''
                        }`}
                        onClick={() => toggleStudent(student.id)}
                      >
                        <td className="p-3">
                          <Checkbox
                            checked={selectedStudents.includes(student.id)}
                            onCheckedChange={(checked) => {
                              if (checked) {
                                setSelectedStudents([...selectedStudents, student.id])
                              } else {
                                setSelectedStudents(selectedStudents.filter(id => id !== student.id))
                              }
                            }}
                            onClick={(e) => e.stopPropagation()}
                          />
                        </td>
                        <td className="p-3 text-sm text-[#2B3A3B]">{index + 1}</td>
                        {selectedColumns.includes('student_oid') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.student_oid || '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('full_name') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            <div className="flex items-center gap-2">
                              <span>{student.full_name || 'Êú™ÂëΩÂêçÂ≠∏Áîü'}</span>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation()
                                  router.push(`/admin/students/${student.id}`)
                                }}
                                className="p-1 hover:bg-[#EADBC8] rounded-full transition-colors"
                              >
                                <img
                                  src="/icons/edit-pencil.png"
                                  alt="Á∑®ËºØ"
                                  className="w-4 h-4"
                                />
                              </button>
                            </div>
                          </td>
                        )}
                        {selectedColumns.includes('student_age') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            {ageInMonths ? `${years} Ê≠≤${months > 0 ? ` ${months} ÂÄãÊúà` : ''}` : '‚Äî'}
                          </td>
                        )}
                        {selectedColumns.includes('gender') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            {student.gender === 'female' ? 'Â•≥' : student.gender === 'male' ? 'Áî∑' : '‚Äî'}
                          </td>
                        )}
                        {selectedColumns.includes('student_dob') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            {student.student_dob ? new Date(student.student_dob).toLocaleDateString('zh-HK') : '‚Äî'}
                          </td>
                        )}
                        {selectedColumns.includes('student_type') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.student_type || '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('course_type') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.course_type || 'Êú™ÂàÜÁè≠'}</td>
                        )}
                        {selectedColumns.includes('school') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.school || '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('address') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.address || '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('student_teacher') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.student_teacher || '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('student_preference') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.student_preference || '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('regular_weekday') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{regularWeekdays}</td>
                        )}
                        {selectedColumns.includes('regular_timeslot') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            {student.regular_timeslot ? 
                              `${student.regular_timeslot.split(':')[0]}:${student.regular_timeslot.split(':')[1]}` : 
                              '‚Äî'
                            }
                          </td>
                        )}
                        {selectedColumns.includes('remaining_lessons') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.remaining_lessons ?? '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('started_date') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            {student.started_date ? new Date(student.started_date).toLocaleDateString('zh-HK') : '‚Äî'}
                          </td>
                        )}
                        {selectedColumns.includes('duration_months') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            {student.duration_months ? `${student.duration_months} ÂÄãÊúà` : '‚Äî'}
                          </td>
                        )}
                        {selectedColumns.includes('contact_number') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            {student.contact_number && student.contact_number.length === 8 ? 
                              `${student.contact_number.slice(0, 4)}-${student.contact_number.slice(4, 8)}` : 
                              student.contact_number || '‚Äî'
                            }
                          </td>
                        )}
                        {selectedColumns.includes('parent_email') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.parent_email || '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('health_notes') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.health_notes || '‚Äî'}</td>
                        )}
                        {selectedColumns.includes('lesson_date') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">
                            {student.lesson_date ? new Date(student.lesson_date).toLocaleDateString('zh-HK') : '‚Äî'}
                          </td>
                        )}
                        {selectedColumns.includes('actual_timeslot') && (
                          <td className="p-3 text-sm text-[#2B3A3B]">{student.actual_timeslot || '‚Äî'}</td>
                        )}
                      </tr>
                    )
                  })}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  )
}