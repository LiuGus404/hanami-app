export const dynamic = "force-dynamic";
import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

export async function GET() {
  try {
    console.log('開始測試資料庫查詢...');

    // 1. 測試：查詢所有課堂記錄的日期範圍
    const { data: allLessons, error: allError } = await supabase
      .from('hanami_student_lesson')
      .select('lesson_date, student_id, full_name')
      .order('lesson_date', { ascending: false })
      .limit(50);

    if (allError) {
      console.error('查詢所有課堂記錄失敗:', allError);
      return NextResponse.json({ error: allError.message }, { status: 500 });
    }

    // 2. 測試：專門查詢7月的課堂記錄
    const { data: julyLessons, error: julyError } = await supabase
      .from('hanami_student_lesson')
      .select('*')
      .gte('lesson_date', '2025-07-01')
      .lt('lesson_date', '2025-08-01');

    if (julyError) {
      console.error('查詢7月課堂記錄失敗:', julyError);
      return NextResponse.json({ error: julyError.message }, { status: 500 });
    }

    // 3. 測試：查詢試堂學生表中的7月記錄
    const { data: trialJulyLessons, error: trialJulyError } = await supabase
      .from('hanami_trial_students')
      .select('*')
      .gte('lesson_date', '2025-07-01')
      .lt('lesson_date', '2025-08-01');

    if (trialJulyError) {
      console.error('查詢試堂學生7月記錄失敗:', trialJulyError);
      return NextResponse.json({ error: trialJulyError.message }, { status: 500 });
    }

    // 4. 分析日期分佈
    const dates: string[] = (allLessons?.map(l => l.lesson_date).sort() || []).filter(Boolean);
    const monthDistribution: Record<string, number> = {};
    dates.forEach(date => {
      const month = typeof date === 'string' ? date.substring(0, 7) : '';
      if (month) monthDistribution[month] = (monthDistribution[month] || 0) + 1;
    });

    const result = {
      totalLessons: allLessons?.length || 0,
      julyLessons: julyLessons?.length || 0,
      trialJulyLessons: trialJulyLessons?.length || 0,
      dateRange: {
        earliest: dates[0] || '無記錄',
        latest: dates[dates.length - 1] || '無記錄'
      },
      monthDistribution,
      sampleLessons: allLessons?.slice(0, 5) || [],
      julySample: julyLessons?.slice(0, 3) || [],
      trialJulySample: trialJulyLessons?.slice(0, 3) || []
    };

    console.log('測試結果:', result);
    return NextResponse.json(result);

  } catch (error) {
    console.error('測試過程中發生錯誤:', error);
    return NextResponse.json({ error: '測試失敗' }, { status: 500 });
  }
} 