{
  "name": "Hanami AI 伙伴系統工作流程",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-message-processor",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-message-trigger",
      "name": "訊息處理 Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ai-message-processor"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  m.*,\n  ri.nickname as role_nickname,\n  r.name as role_name,\n  r.system_prompt,\n  r.default_model,\n  r.temperature,\n  r.max_tokens,\n  r.tools,\n  ri.model_override,\n  ri.system_prompt_override,\n  ri.temperature_override,\n  ri.max_tokens_override,\n  ri.settings as instance_settings\nFROM ai_messages m\nLEFT JOIN role_instances ri ON ri.id = m.sender_role_instance_id\nLEFT JOIN ai_roles r ON r.id = ri.role_id\nWHERE m.id = '{{ $json.message_id }}'\nLIMIT 1",
        "additionalFields": {}
      },
      "id": "get-message-details",
      "name": "獲取訊息詳情",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [460, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase 連接"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "message-status-check",
              "leftValue": "={{ $json.status }}",
              "rightValue": "queued",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-message-status",
      "name": "檢查訊息狀態",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  m.id,\n  m.content,\n  m.sender_type,\n  m.created_at,\n  CASE \n    WHEN m.sender_type = 'user' THEN u.raw_user_meta_data->>'name'\n    WHEN m.sender_type = 'role' THEN COALESCE(ri.nickname, r.name)\n    ELSE 'System'\n  END as sender_name\nFROM ai_messages m\nLEFT JOIN auth.users u ON u.id = m.sender_user_id\nLEFT JOIN role_instances ri ON ri.id = m.sender_role_instance_id\nLEFT JOIN ai_roles r ON r.id = ri.role_id\nWHERE m.room_id = '{{ $('get-message-details').item(0).json.room_id }}'\n  AND m.session_id = '{{ $('get-message-details').item(0).json.session_id }}'\n  AND m.created_at <= '{{ $('get-message-details').item(0).json.created_at }}'\nORDER BY m.created_at DESC\nLIMIT 10",
        "additionalFields": {}
      },
      "id": "get-conversation-context",
      "name": "獲取對話上下文",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [900, 200],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase 連接"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  mi.key,\n  mi.value,\n  mi.memory_type,\n  mi.importance,\n  mi.confidence\nFROM memory_items mi\nWHERE \n  (mi.scope = 'room' AND mi.room_id = '{{ $('get-message-details').item(0).json.room_id }}')\n  OR (mi.scope = 'role' AND mi.role_instance_id = '{{ $('get-message-details').item(0).json.sender_role_instance_id }}')\n  OR (mi.scope = 'session' AND mi.session_id = '{{ $('get-message-details').item(0).json.session_id }}')\nORDER BY mi.importance DESC, mi.created_at DESC\nLIMIT 20",
        "additionalFields": {}
      },
      "id": "get-relevant-memories",
      "name": "獲取相關記憶",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [900, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase 連接"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 構建 AI 請求的上下文\nconst messageDetails = $('get-message-details').item(0).json;\nconst conversationHistory = $('get-conversation-context').all().map(item => item.json);\nconst memories = $('get-relevant-memories').all().map(item => item.json);\n\n// 確定使用的模型和配置\nconst model = messageDetails.model_override || messageDetails.default_model || 'gpt-4o-mini';\nconst temperature = messageDetails.temperature_override || messageDetails.temperature || 0.7;\nconst maxTokens = messageDetails.max_tokens_override || messageDetails.max_tokens || 2000;\n\n// 構建系統提示\nlet systemPrompt = messageDetails.system_prompt_override || messageDetails.system_prompt || '你是一個有用的AI助手。';\n\n// 添加記憶上下文\nif (memories.length > 0) {\n  systemPrompt += '\\n\\n重要記憶：\\n';\n  memories.forEach(memory => {\n    systemPrompt += `- ${memory.key}: ${memory.value}\\n`;\n  });\n}\n\n// 構建對話歷史\nconst messages = [];\n\n// 添加系統提示\nmessages.push({\n  role: 'system',\n  content: systemPrompt\n});\n\n// 添加對話歷史（反轉順序，最舊的在前）\nconversationHistory.reverse().forEach(msg => {\n  if (msg.content) {\n    messages.push({\n      role: msg.sender_type === 'user' ? 'user' : 'assistant',\n      content: msg.content,\n      name: msg.sender_name\n    });\n  }\n});\n\n// 準備 AI API 請求\nconst aiRequest = {\n  model: model,\n  messages: messages,\n  temperature: temperature,\n  max_tokens: maxTokens,\n  stream: false\n};\n\n// 添加工具（如果有）\nif (messageDetails.tools && messageDetails.tools.length > 0) {\n  aiRequest.tools = messageDetails.tools;\n}\n\nreturn {\n  aiRequest,\n  messageId: messageDetails.id,\n  roomId: messageDetails.room_id,\n  sessionId: messageDetails.session_id,\n  roleInstanceId: messageDetails.sender_role_instance_id,\n  model: model,\n  requestStartTime: Date.now()\n};"
      },
      "id": "prepare-ai-request",
      "name": "準備 AI 請求",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "model-provider-check",
              "leftValue": "={{ $json.model.split('-')[0] }}",
              "rightValue": "gpt",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "route-by-model-provider",
      "name": "依模型提供商路由",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "model": "={{ $json.aiRequest.model }}",
        "messages": "={{ $json.aiRequest.messages }}",
        "options": {\n          \"temperature\": \"={{ $json.aiRequest.temperature }}\",\n          \"maxTokens\": \"={{ $json.aiRequest.max_tokens }}\"\n        }\n      },\n      \"id\": \"openai-chat-completion\",\n      \"name\": \"OpenAI 聊天完成\",\n      \"type\": \"n8n-nodes-base.openAi\",\n      \"typeVersion\": 1,\n      \"position\": [1560, 200],\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"openai-api-key\",\n          \"name\": \"OpenAI API\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://api.deepseek.com/chat/completions\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"httpHeaderAuth\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": []\n        },\n        \"jsonBody\": \"={{ JSON.stringify($json.aiRequest) }}\",\n        \"options\": {}\n      },\n      \"id\": \"deepseek-chat-completion\",\n      \"name\": \"DeepSeek 聊天完成\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4,\n      \"position\": [1560, 400],\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"deepseek-api-key\",\n          \"name\": \"DeepSeek API Key\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// 處理不同 AI 提供商的回應格式\\nconst inputData = $input.all();\\nconst requestData = $('prepare-ai-request').item(0).json;\\n\\nlet response;\\nlet usage;\\nlet model;\\n\\n// 檢查是來自哪個 AI 提供商\\nif ($node['openai-chat-completion'] && $node['openai-chat-completion'].json) {\\n  // OpenAI 格式\\n  const openaiResponse = $node['openai-chat-completion'].json;\\n  response = openaiResponse.choices[0].message.content;\\n  usage = openaiResponse.usage;\\n  model = openaiResponse.model;\\n} else if ($node['deepseek-chat-completion'] && $node['deepseek-chat-completion'].json) {\\n  // DeepSeek 格式\\n  const deepseekResponse = $node['deepseek-chat-completion'].json;\\n  response = deepseekResponse.choices[0].message.content;\\n  usage = deepseekResponse.usage;\\n  model = deepseekResponse.model;\\n}\\n\\nconst processingTime = Date.now() - requestData.requestStartTime;\\n\\nreturn {\\n  messageId: requestData.messageId,\\n  roomId: requestData.roomId,\\n  sessionId: requestData.sessionId,\\n  roleInstanceId: requestData.roleInstanceId,\\n  response: response,\\n  model: model,\\n  usage: usage,\\n  processingTime: processingTime,\\n  toolCalls: null // TODO: 處理工具調用\\n};\"\n      },\n      \"id\": \"process-ai-response\",\n      \"name\": \"處理 AI 回應\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [1780, 300]\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"executeQuery\",\n        \"query\": \"UPDATE ai_messages \\nSET \\n  content = '{{ $json.response }}',\\n  model_used = '{{ $json.model }}',\\n  tool_calls = '{{ $json.toolCalls }}',\\n  processing_time_ms = {{ $json.processingTime }},\\n  status = 'sent',\\n  updated_at = NOW()\\nWHERE id = '{{ $json.messageId }}'\",\n        \"additionalFields\": {}\n      },\n      \"id\": \"update-message-with-response\",\n      \"name\": \"更新訊息回應\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"typeVersion\": 2,\n      \"position\": [2000, 300],\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"supabase-connection\",\n          \"name\": \"Supabase 連接\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"executeQuery\",\n        \"query\": \"INSERT INTO ai_usage (\\n  room_id,\\n  session_id,\\n  message_id,\\n  role_instance_id,\\n  provider,\\n  model,\\n  input_tokens,\\n  output_tokens,\\n  latency_ms,\\n  request_data,\\n  response_data\\n) VALUES (\\n  '{{ $json.roomId }}',\\n  '{{ $json.sessionId }}',\\n  '{{ $json.messageId }}',\\n  '{{ $json.roleInstanceId }}',\\n  '{{ $json.model.split(\\"-\\\")[0] }}',\\n  '{{ $json.model }}',\\n  {{ $json.usage.prompt_tokens || 0 }},\\n  {{ $json.usage.completion_tokens || 0 }},\\n  {{ $json.processingTime }},\\n  '{{ JSON.stringify($('prepare-ai-request').item(0).json.aiRequest) }}',\\n  '{{ JSON.stringify($json) }}'\\n)\",\n        \"additionalFields\": {}\n      },\n      \"id\": \"record-usage\",\n      \"name\": \"記錄用量統計\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"typeVersion\": 2,\n      \"position\": [2000, 400],\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"supabase-connection\",\n          \"name\": \"Supabase 連接\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// 分析回應內容，提取可能的記憶\\nconst response = $json.response;\\nconst roomId = $json.roomId;\\nconst roleInstanceId = $json.roleInstanceId;\\nconst sessionId = $json.sessionId;\\n\\n// 簡單的記憶提取邏輯（實際應用中可以使用更複雜的 NLP）\\nconst memories = [];\\n\\n// 提取用戶偏好\\nconst preferencePatterns = [\\n  /我喜歡(.*?)(?=，|。|$)/g,\\n  /我不喜歡(.*?)(?=，|。|$)/g,\\n  /我的興趣是(.*?)(?=，|。|$)/g\\n];\\n\\npreferencePatterns.forEach(pattern => {\\n  let match;\\n  while ((match = pattern.exec(response)) !== null) {\\n    memories.push({\\n      scope: 'room',\\n      room_id: roomId,\\n      role_instance_id: roleInstanceId,\\n      session_id: sessionId,\\n      key: '用戶偏好',\\n      value: match[1].trim(),\\n      memory_type: 'preference',\\n      importance: 0.8,\\n      confidence: 0.7,\\n      source: {\\n        message_id: $json.messageId,\\n        extracted_by: 'n8n_workflow'\\n      }\\n    });\\n  }\\n});\\n\\n// 提取重要事實\\nconst factPatterns = [\\n  /記住(.*?)(?=，|。|$)/g,\\n  /重要的是(.*?)(?=，|。|$)/g\\n];\\n\\nfactPatterns.forEach(pattern => {\\n  let match;\\n  while ((match = pattern.exec(response)) !== null) {\\n    memories.push({\\n      scope: 'room',\\n      room_id: roomId,\\n      role_instance_id: roleInstanceId,\\n      session_id: sessionId,\\n      key: '重要事實',\\n      value: match[1].trim(),\\n      memory_type: 'fact',\\n      importance: 0.9,\\n      confidence: 0.8,\\n      source: {\\n        message_id: $json.messageId,\\n        extracted_by: 'n8n_workflow'\\n      }\\n    });\\n  }\\n});\\n\\nreturn { memories };\"\n      },\n      \"id\": \"extract-memories\",\n      \"name\": \"提取記憶\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [2220, 300]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"strict\"\n          },\n          \"conditions\": [\n            {\n              \"id\": \"has-memories-check\",\n              \"leftValue\": \"={{ $json.memories.length }}\",\n              \"rightValue\": 0,\n              \"operator\": {\n                \"type\": \"number\",\n                \"operation\": \"gt\"\n              }\n            }\n          ],\n          \"combinator\": \"and\"\n        },\n        \"options\": {}\n      },\n      \"id\": \"check-has-memories\",\n      \"name\": \"檢查是否有記憶\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 2,\n      \"position\": [2440, 300]\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"executeQuery\",\n        \"query\": \"INSERT INTO memory_items (\\n  scope,\\n  room_id,\\n  role_instance_id,\\n  session_id,\\n  key,\\n  value,\\n  memory_type,\\n  importance,\\n  confidence,\\n  source\\n) VALUES {{ $json.memories.map(m => `(\\n  '${m.scope}',\\n  '${m.room_id}',\\n  '${m.role_instance_id}',\\n  '${m.session_id}',\\n  '${m.key}',\\n  '${m.value}',\\n  '${m.memory_type}',\\n  ${m.importance},\\n  ${m.confidence},\\n  '${JSON.stringify(m.source)}'\\n)`).join(',') }}\",\n        \"additionalFields\": {}\n      },\n      \"id\": \"save-memories\",\n      \"name\": \"保存記憶\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"typeVersion\": 2,\n      \"position\": [2660, 200],\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"supabase-connection\",\n          \"name\": \"Supabase 連接\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"respondWith\": \"json\",\n        \"responseBody\": \"{{ { \\\"success\\\": true, \\\"message_id\\\": $json.messageId, \\\"processing_time\\\": $json.processingTime } }}\"\n      },\n      \"id\": \"webhook-response\",\n      \"name\": \"Webhook 回應\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1,\n      \"position\": [2880, 300]\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"executeQuery\",\n        \"query\": \"UPDATE ai_messages \\nSET \\n  status = 'error',\\n  error_message = '{{ $json.error || \\\"處理失敗\\\" }}',\\n  updated_at = NOW()\\nWHERE id = '{{ $('prepare-ai-request').item(0).json.messageId }}'\",\n        \"additionalFields\": {}\n      },\n      \"id\": \"update-message-error\",\n      \"name\": \"更新訊息錯誤\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"typeVersion\": 2,\n      \"position\": [2000, 500],\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"supabase-connection\",\n          \"name\": \"Supabase 連接\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"respondWith\": \"json\",\n        \"responseBody\": \"{{ { \\\"success\\\": false, \\\"error\\\": $json.error || \\\"處理失敗\\\" } }}\",\n        \"responseCode\": 500\n      },\n      \"id\": \"webhook-error-response\",\n      \"name\": \"Webhook 錯誤回應\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1,\n      \"position\": [2220, 500]\n    }\n  ],\n  \"connections\": {\n    \"webhook-message-trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get-message-details\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get-message-details\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"check-message-status\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"check-message-status\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get-conversation-context\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"get-relevant-memories\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"webhook-response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get-conversation-context\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"prepare-ai-request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get-relevant-memories\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"prepare-ai-request\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"prepare-ai-request\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"route-by-model-provider\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"route-by-model-provider\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"openai-chat-completion\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"deepseek-chat-completion\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"openai-chat-completion\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"process-ai-response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ],\n      \"error\": [\n        [\n          {\n            \"node\": \"update-message-error\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"deepseek-chat-completion\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"process-ai-response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ],\n      \"error\": [\n        [\n          {\n            \"node\": \"update-message-error\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"process-ai-response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"update-message-with-response\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"record-usage\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"extract-memories\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"update-message-with-response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"webhook-response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"extract-memories\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"check-has-memories\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"check-has-memories\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"save-memories\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"update-message-error\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"webhook-error-response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"active\": false,\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"hanami-ai-companion-v1.0\",\n  \"meta\": {\n    \"templateCredsSetupCompleted\": true\n  },\n  \"id\": \"hanami-ai-companion-workflow\",\n  \"tags\": [\n    {\n      \"createdAt\": \"2025-01-17T00:00:00.000Z\",\n      \"updatedAt\": \"2025-01-17T00:00:00.000Z\",\n      \"id\": \"hanami-ai\",\n      \"name\": \"Hanami AI\"\n    }\n  ]\n}
