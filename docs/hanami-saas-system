-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.ai_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  room_id uuid,
  session_id uuid,
  sender_type text NOT NULL CHECK (sender_type = ANY (ARRAY['user'::text, 'role'::text, 'system'::text])),
  sender_user_id uuid,
  sender_role_instance_id uuid,
  content text,
  content_json jsonb,
  attachments jsonb DEFAULT '[]'::jsonb,
  reply_to_id uuid,
  thread_id uuid,
  model_used text,
  tool_calls jsonb,
  processing_time_ms integer,
  status text DEFAULT 'sent'::text CHECK (status = ANY (ARRAY['queued'::text, 'processing'::text, 'sent'::text, 'error'::text, 'cancelled'::text])),
  error_message text,
  reactions jsonb DEFAULT '{}'::jsonb,
  is_pinned boolean DEFAULT false,
  is_edited boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_messages_pkey PRIMARY KEY (id),
  CONSTRAINT ai_messages_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.ai_rooms(id),
  CONSTRAINT ai_messages_reply_to_id_fkey FOREIGN KEY (reply_to_id) REFERENCES public.ai_messages(id)
);
CREATE TABLE public.ai_roles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  slug text NOT NULL UNIQUE,
  description text,
  avatar_url text,
  category text DEFAULT 'general'::text,
  default_model text DEFAULT 'gpt-4o-mini'::text,
  system_prompt text NOT NULL,
  temperature numeric DEFAULT 0.7,
  max_tokens integer DEFAULT 2000,
  tools jsonb DEFAULT '[]'::jsonb,
  capabilities jsonb DEFAULT '{}'::jsonb,
  pricing_override jsonb,
  creator_user_id uuid,
  is_public boolean DEFAULT true,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'inactive'::text, 'archived'::text])),
  version integer DEFAULT 1,
  usage_count integer DEFAULT 0,
  rating numeric DEFAULT 0.0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  tone text,
  CONSTRAINT ai_roles_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_rooms (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  room_type text DEFAULT 'project'::text CHECK (room_type = ANY (ARRAY['chat'::text, 'project'::text, 'research'::text, 'creative'::text])),
  settings jsonb DEFAULT '{}'::jsonb,
  created_by uuid,
  last_message_at timestamp with time zone DEFAULT now(),
  is_archived boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_rooms_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_rooms_simple (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_rooms_simple_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_usage (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  room_id uuid,
  session_id uuid,
  message_id uuid,
  role_instance_id uuid,
  user_id uuid,
  provider text NOT NULL,
  model text NOT NULL,
  input_tokens integer DEFAULT 0,
  output_tokens integer DEFAULT 0,
  image_count integer DEFAULT 0,
  audio_seconds integer DEFAULT 0,
  total_tokens integer DEFAULT (COALESCE(input_tokens, 0) + COALESCE(output_tokens, 0)),
  latency_ms integer,
  first_token_ms integer,
  cost_usd numeric,
  pricing_snapshot jsonb,
  request_data jsonb,
  response_data jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_usage_pkey PRIMARY KEY (id),
  CONSTRAINT ai_usage_role_instance_id_fkey FOREIGN KEY (role_instance_id) REFERENCES public.role_instances(id)
);
CREATE TABLE public.chat_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  thread_id uuid NOT NULL,
  role text NOT NULL CHECK (role = ANY (ARRAY['user'::text, 'assistant'::text, 'agent'::text, 'system'::text, 'internal'::text])),
  message_type text NOT NULL CHECK (message_type = ANY (ARRAY['user_request'::text, 'plan'::text, 'work'::text, 'review'::text, 'final'::text, 'error'::text])),
  agent_id text,
  content text NOT NULL DEFAULT ''::text,
  content_json jsonb DEFAULT '{}'::jsonb,
  status text NOT NULL DEFAULT 'queued'::text CHECK (status = ANY (ARRAY['queued'::text, 'processing'::text, 'completed'::text, 'error'::text])),
  client_msg_id text NOT NULL,
  turn_no integer DEFAULT 0,
  parent_id uuid,
  processing_time_ms integer,
  error_message text,
  age_rating text DEFAULT 'all'::text CHECK (age_rating = ANY (ARRAY['all'::text, '18+'::text])),
  food_cost integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chat_messages_pkey PRIMARY KEY (id),
  CONSTRAINT chat_messages_thread_id_fkey FOREIGN KEY (thread_id) REFERENCES public.chat_threads(id),
  CONSTRAINT chat_messages_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.chat_messages(id)
);
CREATE TABLE public.chat_threads (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text,
  thread_type text DEFAULT 'project'::text CHECK (thread_type = ANY (ARRAY['chat'::text, 'project'::text, 'research'::text, 'creative'::text])),
  settings jsonb DEFAULT '{}'::jsonb,
  is_archived boolean DEFAULT false,
  age_rating text DEFAULT 'all'::text CHECK (age_rating = ANY (ARRAY['all'::text, '18+'::text])),
  cost_tracking jsonb DEFAULT '{}'::jsonb,
  food_balance_used integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chat_threads_pkey PRIMARY KEY (id)
);
CREATE TABLE public.custom_roles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  avatar_url text,
  avatar_type text DEFAULT 'emoji'::text CHECK (avatar_type = ANY (ARRAY['emoji'::text, 'image'::text, 'icon'::text])),
  avatar_data text,
  color_scheme jsonb DEFAULT '{}'::jsonb,
  category text DEFAULT 'general'::text CHECK (category = ANY (ARRAY['general'::text, 'professional'::text, 'creative'::text, 'educational'::text, 'entertainment'::text, 'research'::text, 'coordination'::text])),
  model_provider text NOT NULL CHECK (model_provider = ANY (ARRAY['openai'::text, 'anthropic'::text, 'google'::text, 'custom'::text])),
  model_name text NOT NULL,
  model_config jsonb DEFAULT '{}'::jsonb,
  system_prompt text NOT NULL,
  tone_settings jsonb DEFAULT '{}'::jsonb,
  personality_traits jsonb DEFAULT '{}'::jsonb,
  capabilities jsonb DEFAULT '[]'::jsonb,
  temperature numeric DEFAULT 0.7 CHECK (temperature >= 0::numeric AND temperature <= 2::numeric),
  max_tokens integer DEFAULT 2000,
  top_p numeric DEFAULT 1.0,
  frequency_penalty numeric DEFAULT 0.0,
  presence_penalty numeric DEFAULT 0.0,
  usage_count integer DEFAULT 0,
  rating numeric DEFAULT 0.0,
  rating_count integer DEFAULT 0,
  is_public boolean DEFAULT false,
  is_template boolean DEFAULT false,
  share_token text UNIQUE,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'inactive'::text, 'archived'::text])),
  version integer DEFAULT 1,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT custom_roles_pkey PRIMARY KEY (id)
);
CREATE TABLE public.food_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  transaction_type text NOT NULL CHECK (transaction_type = ANY (ARRAY['earn'::text, 'spend'::text, 'monthly_allowance'::text, 'purchase'::text])),
  amount integer NOT NULL,
  balance_after integer NOT NULL,
  message_id uuid,
  thread_id uuid,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT food_transactions_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.chat_messages(id),
  CONSTRAINT food_transactions_thread_id_fkey FOREIGN KEY (thread_id) REFERENCES public.chat_threads(id)
);
CREATE TABLE public.hanami_children (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  parent_id uuid NOT NULL,
  full_name text NOT NULL,
  nick_name text,
  birth_date date NOT NULL,
  age_months integer,
  gender text NOT NULL CHECK (gender = ANY (ARRAY['男孩'::text, '女孩'::text])),
  preferences text,
  health_notes text,
  allergies text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT hanami_children_pkey PRIMARY KEY (id),
  CONSTRAINT hanami_children_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.saas_users(id)
);
CREATE TABLE public.hanami_payme_fps_accounts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  institution_name text NOT NULL,
  institution_code text,
  payme_phone text NOT NULL,
  payme_name text NOT NULL,
  payme_link text,
  fps_phone text,
  fps_name text,
  fps_link text,
  is_active boolean DEFAULT true,
  is_primary boolean DEFAULT false,
  notes text,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT hanami_payme_fps_accounts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.hanami_project_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  project_id uuid NOT NULL,
  user_id uuid,
  user_phone text,
  role text NOT NULL DEFAULT 'member'::text CHECK (role = ANY (ARRAY['owner'::text, 'admin'::text, 'member'::text, 'observer'::text])),
  joined_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT hanami_project_members_pkey PRIMARY KEY (id),
  CONSTRAINT hanami_project_members_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.hanami_projects(id)
);
CREATE TABLE public.hanami_projects (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  is_public boolean DEFAULT false,
  invite_code text UNIQUE,
  owner_id uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT hanami_projects_pkey PRIMARY KEY (id)
);
CREATE TABLE public.hanami_task_attachments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  task_id uuid NOT NULL,
  file_name text NOT NULL,
  file_path text NOT NULL,
  file_size bigint,
  file_type text,
  mime_type text,
  uploaded_by uuid,
  uploaded_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT hanami_task_attachments_pkey PRIMARY KEY (id),
  CONSTRAINT hanami_task_attachments_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.hanami_task_list(id)
);
CREATE TABLE public.hanami_task_comments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  task_id uuid NOT NULL,
  user_id uuid,
  user_phone text,
  comment text NOT NULL,
  is_system_message boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT hanami_task_comments_pkey PRIMARY KEY (id),
  CONSTRAINT hanami_task_comments_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.hanami_task_list(id)
);
CREATE TABLE public.hanami_task_list (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text, 'cancelled'::text, 'blocked'::text])),
  priority text NOT NULL CHECK (priority = ANY (ARRAY['urgent_important'::text, 'important_not_urgent'::text, 'urgent_not_important'::text, 'not_urgent_not_important'::text])),
  category ARRAY CHECK (category <@ ARRAY['progress'::text, 'video'::text, 'photo'::text, 'learning'::text, 'enroll'::text, 'course_query'::text, 'leave'::text, 'payment'::text, 'technical'::text, 'time'::text, 'life'::text, 'complaint'::text, 'other'::text]),
  phone text,
  due_date timestamp with time zone,
  time_block_start timestamp with time zone,
  time_block_end timestamp with time zone,
  estimated_duration integer DEFAULT 60,
  actual_duration integer,
  difficulty_level integer DEFAULT 1 CHECK (difficulty_level >= 1 AND difficulty_level <= 5),
  progress_percentage integer DEFAULT 0 CHECK (progress_percentage >= 0 AND progress_percentage <= 100),
  is_public boolean DEFAULT false,
  project_id uuid,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  follow_up_content text,
  assigned_to ARRAY,
  CONSTRAINT hanami_task_list_pkey PRIMARY KEY (id)
);
CREATE TABLE public.memory_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  scope USER-DEFINED NOT NULL,
  role_id uuid,
  role_instance_id uuid,
  user_id uuid,
  room_id uuid,
  session_id uuid,
  task_id uuid,
  key text,
  value text NOT NULL,
  value_json jsonb,
  memory_type text DEFAULT 'fact'::text CHECK (memory_type = ANY (ARRAY['fact'::text, 'preference'::text, 'skill'::text, 'constraint'::text, 'context'::text, 'relationship'::text])),
  importance numeric DEFAULT 0.5,
  confidence numeric DEFAULT 0.8,
  source jsonb DEFAULT '{}'::jsonb,
  embedding USER-DEFINED,
  ttl_days integer,
  expires_at timestamp with time zone,
  access_count integer DEFAULT 0,
  last_accessed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT memory_items_pkey PRIMARY KEY (id),
  CONSTRAINT memory_items_role_instance_id_fkey FOREIGN KEY (role_instance_id) REFERENCES public.role_instances(id)
);
CREATE TABLE public.message_costs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  message_id uuid NOT NULL,
  thread_id uuid NOT NULL,
  user_id uuid NOT NULL,
  input_tokens integer NOT NULL DEFAULT 0,
  output_tokens integer NOT NULL DEFAULT 0,
  total_tokens integer NOT NULL DEFAULT 0,
  model_provider text NOT NULL,
  model_name text NOT NULL,
  input_cost_usd numeric DEFAULT 0,
  output_cost_usd numeric DEFAULT 0,
  total_cost_usd numeric DEFAULT 0,
  food_cost_usd numeric DEFAULT 0,
  food_amount integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT message_costs_pkey PRIMARY KEY (id),
  CONSTRAINT message_costs_thread_id_fkey FOREIGN KEY (thread_id) REFERENCES public.chat_threads(id)
);
CREATE TABLE public.model_configs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  provider text NOT NULL CHECK (provider ~ '^[a-z0-9][a-z0-9\-]*$'::text),
  model_name text NOT NULL,
  display_name text NOT NULL,
  description text,
  capabilities jsonb DEFAULT '[]'::jsonb,
  max_tokens integer,
  context_window integer,
  default_temperature numeric DEFAULT 0.7,
  default_top_p numeric DEFAULT 1.0,
  default_frequency_penalty numeric DEFAULT 0.0,
  default_presence_penalty numeric DEFAULT 0.0,
  pricing_info jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  is_available boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  model_id text,
  input_cost_usd numeric,
  output_cost_usd numeric,
  model_type text NOT NULL DEFAULT 'text'::text,
  is_free boolean DEFAULT false,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT model_configs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.model_pricing (
  provider text NOT NULL,
  model text NOT NULL,
  unit text DEFAULT '1k_tokens'::text,
  input_price_usd numeric DEFAULT 0,
  output_price_usd numeric DEFAULT 0,
  image_price_usd numeric DEFAULT 0,
  audio_price_usd numeric DEFAULT 0,
  max_tokens integer,
  context_window integer,
  supports_tools boolean DEFAULT false,
  supports_vision boolean DEFAULT false,
  supports_audio boolean DEFAULT false,
  metadata jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT model_pricing_pkey PRIMARY KEY (model, provider)
);
CREATE TABLE public.parent_student_bindings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  parent_id uuid NOT NULL,
  student_id uuid NOT NULL,
  student_name text NOT NULL,
  student_oid text,
  institution text DEFAULT 'Hanami Music'::text,
  binding_type text DEFAULT 'parent'::text CHECK (binding_type = ANY (ARRAY['parent'::text, 'guardian'::text, 'family'::text])),
  binding_status text DEFAULT 'active'::text CHECK (binding_status = ANY (ARRAY['active'::text, 'inactive'::text, 'pending'::text])),
  binding_date timestamp with time zone DEFAULT now(),
  last_accessed timestamp with time zone DEFAULT now(),
  access_count integer DEFAULT 0,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT parent_student_bindings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.payment_records (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  payment_method text NOT NULL CHECK (payment_method = ANY (ARRAY['screenshot'::text, 'airwallex'::text, 'stripe'::text, 'paypal'::text])),
  amount numeric NOT NULL,
  currency text NOT NULL DEFAULT 'HKD'::text,
  description text,
  screenshot_url text,
  file_name text,
  airwallex_intent_id text,
  airwallex_request_id text,
  checkout_url text,
  return_url text,
  cancel_url text,
  stripe_payment_intent_id text,
  paypal_order_id text,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text, 'cancelled'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  user_id uuid,
  user_email text,
  metadata jsonb,
  CONSTRAINT payment_records_pkey PRIMARY KEY (id)
);
CREATE TABLE public.role_instances (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  room_id uuid,
  role_id uuid,
  nickname text,
  model_override text,
  system_prompt_override text,
  temperature_override numeric,
  max_tokens_override integer,
  settings jsonb DEFAULT '{}'::jsonb,
  context_window integer DEFAULT 4000,
  is_active boolean DEFAULT true,
  last_used_at timestamp with time zone,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT role_instances_pkey PRIMARY KEY (id)
);
CREATE TABLE public.room_members (
  room_id uuid NOT NULL,
  user_id uuid NOT NULL,
  user_type text DEFAULT 'hanami_user'::text CHECK (user_type = ANY (ARRAY['hanami_user'::text, 'auth_user'::text])),
  role text DEFAULT 'member'::text CHECK (role = ANY (ARRAY['owner'::text, 'admin'::text, 'member'::text, 'observer'::text])),
  permissions jsonb DEFAULT '{}'::jsonb,
  joined_at timestamp with time zone DEFAULT now(),
  last_active_at timestamp with time zone DEFAULT now(),
  CONSTRAINT room_members_pkey PRIMARY KEY (room_id, user_id),
  CONSTRAINT room_members_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.ai_rooms(id)
);
CREATE TABLE public.room_roles (
  room_id uuid NOT NULL,
  role_instance_id uuid NOT NULL,
  display_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  quick_access boolean DEFAULT false,
  CONSTRAINT room_roles_pkey PRIMARY KEY (room_id, role_instance_id),
  CONSTRAINT room_roles_role_instance_id_fkey FOREIGN KEY (role_instance_id) REFERENCES public.role_instances(id)
);
CREATE TABLE public.saas_3d_characters (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  character_name text NOT NULL,
  character_type text NOT NULL CHECK (character_type = ANY (ARRAY['teacher'::text, 'friend'::text, 'mentor'::text, 'custom'::text])),
  model_url text NOT NULL,
  avatar_url text,
  personality_config jsonb NOT NULL,
  voice_config jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_3d_characters_pkey PRIMARY KEY (id)
);
CREATE TABLE public.saas_character_interactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  character_id uuid,
  interaction_type text NOT NULL CHECK (interaction_type = ANY (ARRAY['chat'::text, 'lesson'::text, 'game'::text, 'assessment'::text, 'story'::text, 'task'::text])),
  message_content text,
  response_content text,
  session_id text,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_character_interactions_pkey PRIMARY KEY (id),
  CONSTRAINT saas_character_interactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id),
  CONSTRAINT saas_character_interactions_character_id_fkey FOREIGN KEY (character_id) REFERENCES public.saas_3d_characters(id)
);
CREATE TABLE public.saas_character_modules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  character_id uuid,
  module_type text NOT NULL CHECK (module_type = ANY (ARRAY['communication'::text, 'storytelling'::text, 'task_completion'::text, 'emotional_support'::text, 'memory_system'::text, 'learning_guidance'::text])),
  module_config jsonb NOT NULL,
  is_enabled boolean DEFAULT true,
  priority integer DEFAULT 1,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_character_modules_pkey PRIMARY KEY (id),
  CONSTRAINT saas_character_modules_character_id_fkey FOREIGN KEY (character_id) REFERENCES public.saas_3d_characters(id)
);
CREATE TABLE public.saas_child_bindings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  child_student_id uuid,
  binding_status text DEFAULT 'pending'::text CHECK (binding_status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])),
  verification_code text,
  binding_date timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_child_bindings_pkey PRIMARY KEY (id),
  CONSTRAINT saas_child_bindings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id)
);
CREATE TABLE public.saas_coupons (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  coupon_code text NOT NULL UNIQUE,
  coupon_name text NOT NULL,
  description text,
  discount_type text NOT NULL CHECK (discount_type = ANY (ARRAY['percentage'::text, 'fixed_amount'::text])),
  discount_value numeric NOT NULL,
  applicable_plans ARRAY DEFAULT '{}'::uuid[],
  min_amount numeric DEFAULT 0,
  usage_limit integer,
  usage_count integer DEFAULT 0,
  usage_limit_per_user integer DEFAULT 1,
  valid_from timestamp with time zone DEFAULT now(),
  valid_until timestamp with time zone,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  institution_name text,
  institution_code text,
  used_by_user_ids ARRAY DEFAULT '{}'::text[],
  used_by_emails ARRAY DEFAULT '{}'::text[],
  notes text,
  CONSTRAINT saas_coupons_pkey PRIMARY KEY (id)
);
CREATE TABLE public.saas_emotional_states (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  child_student_id uuid,
  emotional_state text NOT NULL CHECK (emotional_state = ANY (ARRAY['happy'::text, 'sad'::text, 'angry'::text, 'anxious'::text, 'excited'::text, 'frustrated'::text, 'proud'::text, 'confused'::text, 'motivated'::text, 'tired'::text])),
  intensity_level integer CHECK (intensity_level >= 1 AND intensity_level <= 10),
  context text,
  trigger_event text,
  recorded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_emotional_states_pkey PRIMARY KEY (id),
  CONSTRAINT saas_emotional_states_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id)
);
CREATE TABLE public.saas_emotional_support_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  character_id uuid,
  support_type text NOT NULL CHECK (support_type = ANY (ARRAY['encouragement'::text, 'comfort'::text, 'motivation'::text, 'celebration'::text, 'guidance'::text, 'empathy'::text, 'validation'::text])),
  support_content text NOT NULL,
  emotional_state_before text,
  emotional_state_after text,
  effectiveness_rating integer CHECK (effectiveness_rating >= 1 AND effectiveness_rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_emotional_support_logs_pkey PRIMARY KEY (id),
  CONSTRAINT saas_emotional_support_logs_character_id_fkey FOREIGN KEY (character_id) REFERENCES public.saas_3d_characters(id),
  CONSTRAINT saas_emotional_support_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id)
);
CREATE TABLE public.saas_invoices (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  payment_id uuid,
  invoice_number text NOT NULL UNIQUE,
  invoice_date date NOT NULL,
  due_date date,
  amount numeric NOT NULL,
  tax_amount numeric DEFAULT 0,
  total_amount numeric NOT NULL,
  status text DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'overdue'::text])),
  pdf_url text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_invoices_pkey PRIMARY KEY (id),
  CONSTRAINT saas_invoices_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id),
  CONSTRAINT saas_invoices_payment_id_fkey FOREIGN KEY (payment_id) REFERENCES public.saas_payments(id)
);
CREATE TABLE public.saas_learning_progress (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  path_id uuid,
  node_id uuid,
  completion_status text DEFAULT 'not_started'::text CHECK (completion_status = ANY (ARRAY['not_started'::text, 'in_progress'::text, 'completed'::text])),
  performance_rating integer CHECK (performance_rating >= 1 AND performance_rating <= 5),
  time_spent integer,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_learning_progress_pkey PRIMARY KEY (id),
  CONSTRAINT saas_learning_progress_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id),
  CONSTRAINT saas_learning_progress_path_id_fkey FOREIGN KEY (path_id) REFERENCES public.saas_user_learning_paths(id)
);
CREATE TABLE public.saas_memory_relationships (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  memory_id uuid,
  related_memory_id uuid,
  relationship_type text NOT NULL CHECK (relationship_type = ANY (ARRAY['causes'::text, 'follows'::text, 'similar_to'::text, 'contradicts'::text, 'supports'::text])),
  strength numeric DEFAULT 1.0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_memory_relationships_pkey PRIMARY KEY (id),
  CONSTRAINT saas_memory_relationships_memory_id_fkey FOREIGN KEY (memory_id) REFERENCES public.saas_personal_memories(id),
  CONSTRAINT saas_memory_relationships_related_memory_id_fkey FOREIGN KEY (related_memory_id) REFERENCES public.saas_personal_memories(id)
);
CREATE TABLE public.saas_payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  subscription_id uuid,
  amount numeric NOT NULL,
  currency text DEFAULT 'HKD'::text,
  payment_method text NOT NULL CHECK (payment_method = ANY (ARRAY['stripe'::text, 'hk_payment'::text])),
  payment_status text NOT NULL CHECK (payment_status = ANY (ARRAY['pending'::text, 'succeeded'::text, 'failed'::text, 'cancelled'::text])),
  external_payment_id text,
  invoice_number text,
  invoice_url text,
  receipt_url text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_payments_pkey PRIMARY KEY (id),
  CONSTRAINT saas_payments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id),
  CONSTRAINT saas_payments_subscription_id_fkey FOREIGN KEY (subscription_id) REFERENCES public.saas_user_subscriptions(id)
);
CREATE TABLE public.saas_personal_memories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  child_student_id uuid,
  memory_type text NOT NULL CHECK (memory_type = ANY (ARRAY['personal_info'::text, 'learning_progress'::text, 'emotional_state'::text, 'preferences'::text, 'achievements'::text, 'challenges'::text, 'milestones'::text])),
  memory_content jsonb NOT NULL,
  memory_tags ARRAY,
  importance_level integer DEFAULT 1 CHECK (importance_level >= 1 AND importance_level <= 5),
  last_accessed timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_personal_memories_pkey PRIMARY KEY (id),
  CONSTRAINT saas_personal_memories_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id)
);
CREATE TABLE public.saas_personalized_stories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  child_student_id uuid,
  base_story_id uuid,
  personalized_content text NOT NULL,
  personalization_elements jsonb,
  story_session_id text,
  engagement_rating integer CHECK (engagement_rating >= 1 AND engagement_rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_personalized_stories_pkey PRIMARY KEY (id),
  CONSTRAINT saas_personalized_stories_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id),
  CONSTRAINT saas_personalized_stories_base_story_id_fkey FOREIGN KEY (base_story_id) REFERENCES public.saas_story_library(id)
);
CREATE TABLE public.saas_phone_profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  phone text NOT NULL UNIQUE,
  user_id uuid,
  person_name text,
  personality_traits text,
  needs text,
  attitude text,
  attention_notes text,
  level text DEFAULT 'C'::text CHECK (level = ANY (ARRAY['A'::text, 'B'::text, 'C'::text, 'D'::text])),
  important_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  analysis_raw_md text,
  analysis_structured jsonb,
  analysis_model text,
  last_analysis_at timestamp with time zone,
  analysis_version text DEFAULT 'v1'::text,
  CONSTRAINT saas_phone_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT saas_phone_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id)
);
CREATE TABLE public.saas_story_library (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  story_title text NOT NULL,
  story_content text NOT NULL,
  story_type text NOT NULL CHECK (story_type = ANY (ARRAY['educational'::text, 'moral'::text, 'adventure'::text, 'fantasy'::text, 'realistic'::text, 'custom'::text])),
  target_age_min integer,
  target_age_max integer,
  learning_objectives ARRAY,
  emotional_themes ARRAY,
  story_tags ARRAY,
  is_ai_generated boolean DEFAULT false,
  created_by uuid,
  is_public boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_story_library_pkey PRIMARY KEY (id),
  CONSTRAINT saas_story_library_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.saas_users(id)
);
CREATE TABLE public.saas_subscription_plans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  plan_name text NOT NULL,
  plan_type text NOT NULL CHECK (plan_type = ANY (ARRAY['free'::text, 'basic'::text, 'premium'::text, 'professional'::text])),
  price_monthly numeric,
  price_yearly numeric,
  usage_limit integer NOT NULL,
  features jsonb NOT NULL,
  stripe_price_id_monthly text,
  stripe_price_id_yearly text,
  hk_payment_plan_id text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_subscription_plans_pkey PRIMARY KEY (id)
);
CREATE TABLE public.saas_task_definitions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  task_name text NOT NULL,
  task_description text NOT NULL,
  task_type text NOT NULL CHECK (task_type = ANY (ARRAY['learning'::text, 'behavioral'::text, 'creative'::text, 'social'::text, 'emotional'::text, 'custom'::text])),
  difficulty_level integer CHECK (difficulty_level >= 1 AND difficulty_level <= 5),
  estimated_duration integer,
  required_abilities ARRAY,
  success_criteria jsonb,
  rewards jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_task_definitions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.saas_usage_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  action_type text NOT NULL CHECK (action_type = ANY (ARRAY['ai_chat'::text, 'learning_path'::text, '3d_character'::text, 'lesson_plan'::text, 'storytelling'::text, 'task_completion'::text])),
  usage_count integer DEFAULT 1,
  session_duration integer,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_usage_logs_pkey PRIMARY KEY (id),
  CONSTRAINT saas_usage_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id)
);
CREATE TABLE public.saas_usage_records (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  subscription_id uuid NOT NULL,
  usage_type text NOT NULL CHECK (usage_type = ANY (ARRAY['ai_interaction'::text, 'storage_upload'::text, 'lesson_plan_creation'::text, 'memory_entry'::text])),
  usage_amount integer NOT NULL DEFAULT 1,
  usage_metadata jsonb DEFAULT '{}'::jsonb,
  recorded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_usage_records_pkey PRIMARY KEY (id),
  CONSTRAINT saas_usage_records_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id),
  CONSTRAINT saas_usage_records_subscription_id_fkey FOREIGN KEY (subscription_id) REFERENCES public.saas_user_subscriptions(id)
);
CREATE TABLE public.saas_user_learning_paths (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  path_id uuid,
  child_student_id uuid,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'paused'::text, 'completed'::text])),
  current_node_id uuid,
  progress_percentage numeric DEFAULT 0,
  started_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_user_learning_paths_pkey PRIMARY KEY (id),
  CONSTRAINT saas_user_learning_paths_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id)
);
CREATE TABLE public.saas_user_subscriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  plan_id uuid,
  status text NOT NULL CHECK (status = ANY (ARRAY['active'::text, 'cancelled'::text, 'expired'::text, 'pending'::text])),
  start_date timestamp with time zone NOT NULL,
  end_date timestamp with time zone,
  payment_method text,
  stripe_subscription_id text,
  hk_payment_id text,
  invoice_url text,
  created_at timestamp with time zone DEFAULT now(),
  billing_cycle text NOT NULL DEFAULT 'monthly'::text CHECK (billing_cycle = ANY (ARRAY['monthly'::text, 'yearly'::text])),
  current_period_start timestamp with time zone NOT NULL DEFAULT now(),
  current_period_end timestamp with time zone NOT NULL DEFAULT (now() + '1 mon'::interval),
  trial_start timestamp with time zone,
  trial_end timestamp with time zone,
  cancelled_at timestamp with time zone,
  stripe_customer_id text,
  payment_method_id text,
  usage_stats jsonb NOT NULL DEFAULT '{}'::jsonb,
  CONSTRAINT saas_user_subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT saas_user_subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id),
  CONSTRAINT saas_user_subscriptions_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public.saas_subscription_plans(id)
);
CREATE TABLE public.saas_user_tasks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  child_student_id uuid,
  task_definition_id uuid,
  task_status text DEFAULT 'assigned'::text CHECK (task_status = ANY (ARRAY['assigned'::text, 'in_progress'::text, 'completed'::text, 'failed'::text, 'cancelled'::text])),
  assigned_by_character uuid,
  assigned_at timestamp with time zone DEFAULT now(),
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  completion_notes text,
  performance_rating integer CHECK (performance_rating >= 1 AND performance_rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_user_tasks_pkey PRIMARY KEY (id),
  CONSTRAINT saas_user_tasks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.saas_users(id),
  CONSTRAINT saas_user_tasks_task_definition_id_fkey FOREIGN KEY (task_definition_id) REFERENCES public.saas_task_definitions(id),
  CONSTRAINT saas_user_tasks_assigned_by_character_fkey FOREIGN KEY (assigned_by_character) REFERENCES public.saas_3d_characters(id)
);
CREATE TABLE public.saas_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL UNIQUE,
  phone text,
  full_name text NOT NULL,
  avatar_url text,
  subscription_status text DEFAULT 'free'::text CHECK (subscription_status = ANY (ARRAY['free'::text, 'trial'::text, 'active'::text, 'cancelled'::text, 'expired'::text])),
  subscription_plan_id uuid,
  subscription_start_date timestamp with time zone,
  subscription_end_date timestamp with time zone,
  usage_count integer DEFAULT 0,
  usage_limit integer DEFAULT 10,
  is_verified boolean DEFAULT false,
  verification_method text CHECK (verification_method = ANY (ARRAY['email'::text, 'phone'::text, 'both'::text])),
  last_login timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT saas_users_pkey PRIMARY KEY (id),
  CONSTRAINT saas_users_subscription_plan_id_fkey FOREIGN KEY (subscription_plan_id) REFERENCES public.saas_subscription_plans(id)
);
CREATE TABLE public.user_age_verification (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  birth_date date,
  age_verified boolean DEFAULT false,
  verification_method text CHECK (verification_method = ANY (ARRAY['self_declared'::text, 'document'::text, 'admin_verified'::text])),
  parent_consent boolean DEFAULT false,
  parent_email text,
  parent_verified_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_age_verification_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_food_balance (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  current_balance integer DEFAULT 0,
  total_earned integer DEFAULT 0,
  total_spent integer DEFAULT 0,
  monthly_allowance integer DEFAULT 1000,
  last_monthly_reset timestamp with time zone DEFAULT now(),
  daily_usage integer DEFAULT 0,
  weekly_usage integer DEFAULT 0,
  monthly_usage integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_food_balance_pkey PRIMARY KEY (id)
);