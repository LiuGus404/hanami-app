{
	"info": {
		"_postman_id": "a9c34796-191b-448a-b8df-f29d72bd0818",
		"name": "Airwallex Public API v2025-06-30",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48985087",
		"_collection_link": "https://www.postman.com/airwallex/airwallex-api/collection/wuo0gd4/airwallex-public-api-v2025-06-30?action=share&source=collection_link&creator=48985087"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "API Access",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Endpoint returns a token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.token).to.be.a(\"string\")",
											"});",
											"",
											"pm.environment.set(\"bearer_token_expires_at\", JSON.parse(responseBody).expires_at);",
											"pm.environment.set(\"bearer_token\", JSON.parse(responseBody).token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const clientId = pm.variables.get(\"clientId\");",
											"const apiKey = pm.variables.get(\"apiKey\");",
											"",
											"if (clientId === \"\" || apiKey === \"\") {",
											"    throw new Error(\"Please set the values for the variables 'clientId' or 'apiKey'.\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-client-id",
										"value": "{{clientId}}"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/authentication/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"authentication",
										"login"
									]
								},
								"description": "**POST /api/v1/authentication/login **"
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Supporting Services",
			"item": [
				{
					"name": "File Service",
					"item": [
						{
							"name": "Upload a file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"file_id\", JSON.parse(responseBody).file_id);",
											"pm.environment.set(\"filename\", JSON.parse(responseBody).filename);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{file_url}}/api/v1/files/upload",
									"host": [
										"{{file_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"upload"
									],
									"query": [
										{
											"key": "notes",
											"value": "File upload test",
											"description": "The notes of the uploaded file, max length is 50 characters",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get onboarding file download links",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_ids\": [\n        \"{{file_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/files/download_links",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"download_links"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reference Data",
					"item": [
						{
							"name": "Industry categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/reference/industry_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"reference",
										"industry_categories"
									],
									"query": [
										{
											"key": "name",
											"value": "",
											"description": "Name of industry category.",
											"disabled": true
										},
										{
											"key": "sub_items",
											"value": "",
											"description": "List of industry subcategories associated with the industry category.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid conversion dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/reference/invalid_conversion_dates?currency_pair=USDCNY",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"reference",
										"invalid_conversion_dates"
									],
									"query": [
										{
											"key": "currency_pair",
											"value": "USDCNY",
											"description": "Currency pair to get the invalid conversion dates for"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Settlement accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/reference/settlement_accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"reference",
										"settlement_accounts"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Return settlement account for this currency only",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Supported currencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/reference/supported_currencies",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"reference",
										"supported_currencies"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Payouts",
			"item": [
				{
					"name": "Beneficiaries",
					"item": [
						{
							"name": "Get list of beneficiaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries"
									],
									"query": [
										{
											"key": "bank_account_number",
											"value": "",
											"description": "Filter on bank account number of beneficiary",
											"disabled": true
										},
										{
											"key": "company_name",
											"value": "",
											"description": "Filter on company name of beneficiary",
											"disabled": true
										},
										{
											"key": "entity_type",
											"value": "",
											"description": "Filter on entity type of COMPANY or PERSONAL",
											"disabled": true
										},
										{
											"key": "from_date",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "name",
											"value": "",
											"description": "Filter on name of beneficiary",
											"disabled": true
										},
										{
											"key": "nick_name",
											"value": "",
											"description": "Filter on nickname of beneficiary",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "to_date",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a beneficiary by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries/:beneficiary_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries",
										":beneficiary_id"
									],
									"variable": [
										{
											"key": "beneficiary_id",
											"value": "{{beneficiary_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new beneficiary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"US\",\n            \"postcode\": \"{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"USD\",\n            \"account_name\": \"{{$randomCompanyName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"US\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"CHASUS33\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\",\n        \"type\": \"BANK_ACCOUNT\"\n    },\n    \"transfer_methods\": [\n        \"SWIFT\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete existing beneficiary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries/:id/delete",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{beneficiary_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing beneficiary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"US\",\n            \"postcode\": \"{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"USD\",\n            \"account_name\": \"{{$randomCompanyName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"US\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"CHASUS33\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"transfer_methods\": [\n        \"SWIFT\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries/:beneficiary_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries",
										":beneficiary_id",
										"update"
									],
									"variable": [
										{
											"key": "beneficiary_id",
											"value": "{{beneficiary_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate beneficiary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"US\",\n            \"postcode\": \"{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"USD\",\n            \"account_name\": \"{{$randomCompanyName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"US\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"CHASUS33\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"transfer_methods\": [\n        \"SWIFT\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries/validate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the API schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_currency\": \"USD\",\n    \"bank_country_code\": \"US\",\n    \"entity_type\": \"COMPANY\",\n    \"local_clearing_system\": \"ACH\",\n    \"transfer_method\": \"LOCAL\",\n    \"type\": \"BANK_ACCOUNT\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/beneficiary_api_schemas/generate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiary_api_schemas",
										"generate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the form schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_currency\": \"HKD\",\n    \"bank_country_code\": \"HK\",\n    \"entity_type\": \"COMPANY\",\n    \"transfer_method\": \"LOCAL\",\n    \"local_clearing_system\": null,\n    \"type\": \"BANK_ACCOUNT\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/beneficiary_form_schemas/generate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiary_form_schemas",
										"generate"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":beneficiary_id\"))",
									"    return;",
									"",
									"let beneficiary_id = pm.environment.get(\"beneficiary_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof beneficiary_id === \"undefined\" || beneficiary_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/beneficiaries\";",
									"    console.warn(`Environment variable 'beneficiary_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'beneficiary_id' to the first beneficiary ${res.json().items[0].id}`);",
									"            pm.variables.set(\"beneficiary_id\", res.json().items[0].id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'beneficiary_id' is not set, and cannot set a default, as there is no beneficiary returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Payers",
					"item": [
						{
							"name": "Get list of payers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payers",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers"
									],
									"query": [
										{
											"key": "entity_type",
											"value": "",
											"description": "Filter on entity type of COMPANY or PERSONAL",
											"disabled": true
										},
										{
											"key": "from_date",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "name",
											"value": "",
											"description": "Filter on name of payer",
											"disabled": true
										},
										{
											"key": "nick_name",
											"value": "",
											"description": "Filter on nickname of payer",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "to_date",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new payer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payer\": {\n        \"additional_info\": {\n            \"business_registration_number\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomInt}}{{$randomInt}}\"\n        },\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"{{$randomInt}}{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/payers/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a payer by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payers/:payer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers",
										":payer_id"
									],
									"variable": [
										{
											"key": "payer_id",
											"value": "{{payer_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing payer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payer\": {\n        \"additional_info\": {\n            \"business_registration_number\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomInt}}{{$randomInt}}\"\n        },\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"{{$randomInt}}{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/payers/:payer_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers",
										":payer_id",
										"update"
									],
									"variable": [
										{
											"key": "payer_id",
											"value": "{{payer_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate payer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payer\": {\n        \"additional_info\": {\n            \"business_registration_number\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomInt}}{{$randomInt}}\"\n        },\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"{{$randomInt}}{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    }\n};",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/payers/validate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete existing payer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payers/:payer_id/delete",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers",
										":payer_id",
										"delete"
									],
									"variable": [
										{
											"key": "payer_id",
											"value": "{{payer_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":payer_id\"))",
									"    return;",
									"",
									"let payer_id = pm.environment.get(\"payer_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof payer_id === \"undefined\" || payer_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/payers\";",
									"    console.warn(`Environment variable 'payer_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'payer_id' to the first payer ${res.json().items[0].id}`);",
									"            pm.variables.set(\"payer_id\", res.json().items[0].id);",
									"            console.log(payer_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'payer_id' is not set, and cannot set a default, as there is no payer returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Transfers",
					"item": [
						{
							"name": "Create a new transfer - to beneficiary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"25000\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"CNY\",\n            \"account_name\": \"{{$randomFullName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"CN\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"ABOCCNBJ\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\",\n        \"type\": \"BANK_ACCOUNT\"\n    },\n    \"transfer_amount\": 1000,\n    \"transfer_currency\": \"CNY\",\n    \"transfer_method\": \"SWIFT\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Test {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source_amount\": null,\n    \"source_currency\": \"USD\",\n    \"swift_charge_option\": \"SHARED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/transfers/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new transfer - to beneficiary_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let beneficiary_id = pm.environment.get(\"beneficiary_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof beneficiary_id === \"undefined\" || beneficiary_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/beneficiaries\";",
											"    console.warn(`Environment variable 'beneficiary_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'beneficiary_id' to the first beneficiary ${res.json().items[0].id}`);",
											"            pm.variables.set(\"beneficiary_id\", res.json().items[0].id);",
											"            pm.variables.set(\"beneficiary_account_currency\", res.json().items[0].beneficiary.bank_details.account_currency);",
											"            pm.variables.set(\"beneficiary_account_currency\", res.json().items[0].beneficiary.bank_details.account_currency);",
											"            pm.variables.set(\"beneficiary_payment_method\", res.json().items[0].transfer_methods[0]);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'beneficiary_id' is not set, and cannot set a default, as there is no beneficiary returned.\");",
											"        }",
											"    });",
											"}",
											"else {",
											"    request_url = BASE_URL + \"/api/v1/beneficiaries/\" + beneficiary_id;",
											"    console.warn(`Calling ${request_url} to default other payment variables.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().beneficiary !== undefined) {",
											"            pm.variables.set(\"beneficiary_account_currency\", res.json().beneficiary.bank_details.account_currency);",
											"            pm.variables.set(\"beneficiary_account_currency\", res.json().beneficiary.bank_details.account_currency);",
											"            pm.variables.set(\"beneficiary_payment_method\", res.json().transfer_methods[0]);",
											"        }",
											"        else {",
											"            throw new Error(`No beneficiary returned for the given beneficiary_id '${beneficiary_id}'.`);",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary_id\": \"{{beneficiary_id}}\",\n    \"transfer_amount\": 1000,\n    \"transfer_currency\": \"{{beneficiary_account_currency}}\",\n    \"transfer_method\": \"{{beneficiary_payment_method}}\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Test {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source_amount\": null,\n    \"source_currency\": \"CNY\",\n    \"swift_charge_option\": \"SHARED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/transfers/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of transfers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/transfers",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page, defaultValue 2000",
											"disabled": true
										},
										{
											"key": "payment_currency",
											"value": "HKD",
											"description": "Payment currency",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "ca62b786-1137-45dd-ab94-b5adcb536a12",
											"description": "Payment request_id",
											"disabled": true
										},
										{
											"key": "short_reference_id",
											"value": "P211220-633K36F",
											"description": "Payment short_reference_id",
											"disabled": true
										},
										{
											"key": "status",
											"value": "CANCELLED",
											"description": "Status of the payment",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transfer by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/transfers/:transfer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers",
										":transfer_id"
									],
									"variable": [
										{
											"key": "transfer_id",
											"value": "{{transfer_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"25000\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"CNY\",\n            \"account_name\": \"{{$randomFullName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"CN\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"ABOCCNBJ\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"transfer_amount\": 1000,\n    \"transfer_currency\": \"CNY\",\n    \"transfer_method\": \"SWIFT\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Test {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source_amount\": null,\n    \"source_currency\": \"USD\",\n    \"swift_charge_option\": \"SHARED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/transfers/validate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel a transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/transfers/:transfer_id/cancel",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers",
										":transfer_id",
										"cancel"
									],
									"variable": [
										{
											"key": "transfer_id",
											"value": "{{transfer_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":transfer_id\"))",
									"    return;",
									"",
									"let transfer_id = pm.environment.get(\"transfer_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof transfer_id === \"undefined\" || transfer_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/transfers\";",
									"    console.warn(`Environment variable 'transfer_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'transfer_id' to the first payment ${res.json().items[0].id}`);",
									"            pm.variables.set(\"transfer_id\", res.json().items[0].id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'transfer_id' is not set, and cannot set a default, as there is no payment returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Issuing",
			"item": [
				{
					"name": "Authorizations",
					"item": [
						{
							"name": "Get authorization status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/authorizations",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"authorizations"
									],
									"query": [
										{
											"key": "billing_currency",
											"value": "",
											"description": "Currency in which transition was billed. (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "card_id",
											"value": "",
											"description": "Unique Identifier for card",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "2022-01-25T14:34:29.622+0800",
											"description": "start of Transaction Date in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "200",
											"description": "Number of results per page",
											"disabled": true
										},
										{
											"key": "retrieval_ref",
											"value": "",
											"description": "Retrieval reference number",
											"disabled": true
										},
										{
											"key": "status",
											"value": "CLEARED",
											"description": "Outstanding authorization status - one of PENDING, CLEARED, EXPIRED, REVERSED, FAILED",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "2022-01-26",
											"description": "end of Transaction Date in ISO8601 format (exclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single authorization status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let issuing_transaction_id = pm.environment.get(\"issuing_transaction_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof issuing_transaction_id === \"undefined\" || issuing_transaction_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/issuing/authorizations\";",
											"    console.warn(`Environment variable 'issuing_transaction_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items !== undefined && res.json().items.length > 0) {",
											"            console.info(`Defaulting 'issuing_transaction_id' to the first authorization ${res.json().items[0].transaction_id}`);",
											"            pm.variables.set(\"issuing_transaction_id\", res.json().items[0].transaction_id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'issuing_transaction_id' is not set, and cannot set a default, as there is no authorization returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/authorizations/:issuing_transaction_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"authorizations",
										":issuing_transaction_id"
									],
									"variable": [
										{
											"key": "issuing_transaction_id",
											"value": "{{issuing_transaction_id}}",
											"description": "(Required) Unique Identifier for transaction"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "You can view authorizations such as pre auth and capture processed against individual cards or for all cards created within your organisation."
				},
				{
					"name": "Cardholders",
					"item": [
						{
							"name": "Create a cardholder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.environment.set(\"cardholder_id\", JSON.parse(responseBody).cardholder_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test+{{$guid}}@example.com\",\n    \"individual\": {\n        \"date_of_birth\": \"1982-11-02\",\n        \"express_consent_obtained\": \"yes\",\n        \"identification\": {\n            \"country\": \"US\",\n            \"expiry_date\": \"2030-08-28\",\n            \"number\": \"001238243\",\n            \"type\": \"ID_CARD\"\n        },\n        \"name\": {\n            \"first_name\": \"{{$randomFirstName}}\",\n            \"last_name\": \"{{$randomLastName}}\"\n        },\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country\": \"US\",\n            \"line1\": \"{{$randomStreetName}}\",\n            \"state\": \"CA\",\n            \"postcode\": \"94932\"\n        }\n    },\n    \"mobile_number\": \"91-95053039\",\n    \"postal_address\": {\n        \"city\": \"{{$randomCity}}\",\n        \"country\": \"US\",\n        \"line1\": \"{{$randomStreetName}}\",\n        \"state\": \"CA\",\n        \"postcode\": \"94932\"\n    },\n    \"type\": \"INDIVIDUAL\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/issuing/cardholders/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cardholders",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all cardholders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cardholders",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cardholders"
									],
									"query": [
										{
											"key": "cardholder_status",
											"value": "",
											"description": "Cardholder status to filter by - one of PENDING, READY, DISABLED",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get cardholder details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cardholders/:cardholder_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cardholders",
										":cardholder_id"
									],
									"variable": [
										{
											"key": "cardholder_id",
											"value": "{{cardholder_id}}",
											"description": "(Required) Unique Identifier for cardholder"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a cardholder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"individual\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country\": \"US\",\n            \"line1\": \"{{$randomStreetName}}\",\n            \"state\": \"TX\",\n            \"postcode\": \"94932\"\n        }\n    },\n    \"mobile_number\": \"91-95053039\",\n    \"postal_address\": {\n        \"city\": \"{{$randomCity}}\",\n        \"country\": \"US\",\n        \"line1\": \"{{$randomStreetName}}\",\n        \"state\": \"CA\",\n        \"postcode\": \"94932\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/issuing/cardholders/:cardholder_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cardholders",
										":cardholder_id",
										"update"
									],
									"variable": [
										{
											"key": "cardholder_id",
											"value": "{{cardholder_id}}",
											"description": "(Required) Unique Identifier for cardholder"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "You can create cardholders, which are authorized representatives of your business that can be issued cards.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":cardholder_id\"))",
									"    return;",
									"",
									"let cardholder_id = pm.environment.get(\"cardholder_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof cardholder_id === \"undefined\" || cardholder_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/issuing/cardholders\";",
									"    console.warn(`Environment variable 'cardholder_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items !== undefined && res.json().items.length > 0) {",
									"            console.info(`Defaulting 'cardholder_id' to the first card ${res.json().items[0].cardholder_id}`);",
									"            pm.variables.set(\"cardholder_id\", res.json().items[0].cardholder_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'cardholder_id' is not set, and cannot set a default, as there is no cardholder returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Cards",
					"item": [
						{
							"name": "Create a card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.environment.set(\"card_id\", JSON.parse(responseBody).card_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorization_controls\": {\n        \"allowed_transaction_count\": \"MULTIPLE\",\n        \"transaction_limits\": {\n            \"currency\": \"USD\",\n            \"limits\": [\n                {\n                    \"amount\": 10000,\n                    \"interval\": \"PER_TRANSACTION\"\n                }\n            ]\n        }\n    },\n    \"created_by\": \"Postman Test\",\n    \"form_factor\": \"VIRTUAL\",\n    \"request_id\": \"{{$guid}}\",\n    \"cardholder_id\": \"{{cardholder_id}}\",\n    \"program\": {\n        \"purpose\": \"COMMERCIAL\",\n        \"type\": \"CREDIT\",\n        \"sub_type\": \"GOOD_FUNDS_CREDIT\"\n    },\n    \"is_personalized\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all cards",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards"
									],
									"query": [
										{
											"key": "card_status",
											"value": "",
											"description": "Current card status\nOne of PENDING, FAILED, INACTIVE, ACTIVE, LOST, STOLEN, CLOSED, BLOCKED",
											"disabled": true
										},
										{
											"key": "cardholder_id",
											"value": "",
											"description": "The id of the cardholder for the card, if it is an employee card.",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "Created_from_date in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "nick_name",
											"value": "",
											"description": "Will be used to return cards whose nickname exactly matches the value of this field.",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "Created_to_date in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sensitive card details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id/details",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id",
										"details"
									],
									"variable": [
										{
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate a card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id",
										"activate"
									],
									"variable": [
										{
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get card details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id"
									],
									"variable": [
										{
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get card remaining limits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id/limits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id",
										"limits"
									],
									"variable": [
										{
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorization_controls\": {\n        \"allowed_transaction_count\": \"MULTIPLE\",\n        \"transaction_limits\": {\n            \"currency\": \"USD\",\n            \"limits\": [\n                {\n                    \"amount\": 20000,\n                    \"interval\": \"ALL_TIME\"\n                }\n            ]\n        }\n    },\n    \"card_status\": \"INACTIVE\",\n    \"nick_name\": \"Postman Test Card\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id",
										"update"
									],
									"variable": [
										{
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "You can create virtual cards associated with your organisation, these cards can be single or multi-usage and be restricted by merchant code, currency and transaction amount.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":card_id\"))",
									"    return;",
									"",
									"let card_id = pm.environment.get(\"card_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof card_id === \"undefined\" || card_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/issuing/cards\";",
									"    console.warn(`Environment variable 'card_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items !== undefined && res.json().items.length > 0) {",
									"            console.info(`Defaulting 'card_id' to the first card ${res.json().items[0].card_id}`);",
									"            pm.variables.set(\"card_id\", res.json().items[0].card_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'card_id' is not set, and cannot set a default, as there is no card returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Config",
					"item": [
						{
							"name": "Get issuing config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/config",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update issuing config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"remote_call_config\": {\n        \"url\": \"https://foo.bar.airwallex\",\n        \"methods\": [\n            {\n                \"name\": \"Echo\",\n                \"path\": \"/echo\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/issuing/config/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"config",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Get transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/transactions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"transactions"
									],
									"query": [
										{
											"key": "billing_currency",
											"value": "",
											"description": "Currency in which transaction was billed. (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "card_id",
											"value": "",
											"description": "Unique Identifier for card",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "2022-01-25T14:20:23.375+0800",
											"description": "start of Transaction Date in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "200",
											"description": "Number of results per page",
											"disabled": true
										},
										{
											"key": "retrieval_ref",
											"value": "",
											"description": "Retrieval reference number",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "2022-01-26",
											"description": "end of Transaction Date in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "transaction_type",
											"value": "",
											"description": "Transaction Type - one of AUTHORIZATION, CLEARING, REFUND, REVERSAL, ORIGINAL_CREDIT\nAUTHORIZATION - Funds reserved due to card usage\nCLEARING - Deducting purchase amount from account balance\nREFUND - Refunding the purchase amount back to account balance\nREVERSAL - Reversing an authorization\nORIGINAL_CREDIT - Merchant initiated credit transactions",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let issuing_transaction_id = pm.environment.get(\"issuing_transaction_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof issuing_transaction_id === \"undefined\" || issuing_transaction_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/issuing/transactions\";",
											"    console.warn(`Environment variable 'issuing_transaction_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items !== undefined && res.json().items.length > 0) {",
											"            console.info(`Defaulting 'issuing_transaction_id' to the first authorization ${res.json().items[0].transaction_id}`);",
											"            pm.variables.set(\"issuing_transaction_id\", res.json().items[0].transaction_id);",
											"        }",
											"        else {",
											"            console.error(\"Environment variable 'issuing_transaction_id' is not set, and cannot set a default, as there is no transaction returned.\");",
											"            ",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/transactions/:issuing_transaction_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"transactions",
										":issuing_transaction_id"
									],
									"variable": [
										{
											"key": "issuing_transaction_id",
											"value": "{{issuing_transaction_id}}",
											"description": "(Required) Unique Identifier for transaction"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Scale",
			"item": [
				{
					"name": "Account Links",
					"item": [
						{
							"name": "Create an account invitation link - oauth2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"invitation_link_id\", JSON.parse(responseBody).id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\": \"external_account_id_{{$guid}}\",\n    \"metadata\": {},\n    \"mode\": \"oauth2\",\n    \"oauth2\": {\n        \"redirect_uri\": \"{{$randomUrl}}\",\n        \"response_type\": \"code\",\n        \"scope\": [\n            \"r:awx_action:balances_view\",\n            \"r:awx_action:settings.account_details_view\"\n        ],\n        \"state\": \"state-{{$guid}}\"\n    },\n    \"prefilled_formdata\": [\n        {\n            \"editable\": false,\n            \"field\": \"email\",\n            \"value\": \"test.{{$timestamp}}@example.com\",\n            \"verified\": true\n        },\n        {\n            \"editable\": false,\n            \"field\": \"business_name\",\n            \"value\": \"{{$randomCompanyName}}\",\n            \"verified\": true\n        },\n        {\n            \"editable\": false,\n            \"field\": \"first_name\",\n            \"value\": \"{{$randomFirstName}}\",\n            \"verified\": true\n        },\n        {\n            \"editable\": false,\n            \"field\": \"last_name\",\n            \"value\": \"{{$randomLastName}}\",\n            \"verified\": true\n        },\n        {\n            \"editable\": false,\n            \"field\": \"contact_name\",\n            \"value\": \"{{$randomFullName}}\",\n            \"verified\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/accounts/invitation_links/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										"invitation_links",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an account invitation link - scale_connect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"invitation_link_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"request_url = BASE_URL + \"/api/v1/accounts/\" + pm.variables.get(\"connected_account_id\");",
											"",
											"pm.sendRequest({",
											"    url: request_url,",
											"    method: \"GET\",",
											"    header: { \"Authorization\": \"Bearer \" + pm.variables.get(\"bearer_token\") }",
											"}, function (err, res) {",
											"    if (res.json().items[0].primary_contact !== undefined) {",
											"        pm.variables.set(\"connected_account_email\", res.json().items[0].primary_contact.email);",
											"    }",
											"    else {",
											"        throw new Error(`Cannot retrieve account details for connected_account_id '${connected_account_id}'.`);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_id\": \"{{connected_account_id}}\",\n    \"mode\": \"scale_connect\",\n    \"prefilled_formdata\": [\n        {\n            \"editable\": false,\n            \"field\": \"email\",\n            \"value\": \"{{connected_account_email}}\",\n            \"verified\": true\n        }\n    ],\n    \"scale_connect\": {\n        \"redirect_uri\": \"https://www.pstmn.io/v1/callback\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/accounts/invitation_links/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										"invitation_links",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an account invitation link by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts/invitation_links/:invitation_link_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										"invitation_links",
										":invitation_link_id"
									],
									"variable": [
										{
											"key": "invitation_link_id",
											"value": "{{invitation_link_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Accounts",
					"item": [
						{
							"name": "Create an account - Business",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"connected_account_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_details\": {\n        \"attachments\": {\n            \"additional_files\": []\n        },\n        \"business_details\": {\n            \"account_usage\": {\n                \"estimated_monthly_revenue\": {\n                    \"amount\": \"10000\",\n                    \"currency\": \"USD\"\n                },\n                \"product_reference\": [\n                    \"RECEIVE_TRANSFERS\",\n                    \"CONVERT_FUNDS\",\n                    \"MAKE_TRANSFERS\"\n                ]\n            },\n            \"attachments\": {\n                \"business_documents\": [\n                    {\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"CERTIFICATE_OF_INCORPORATION\"\n                    }\n                ]\n            },\n            \"business_address\": {\n                \"address_line1\": \"{{$randomStreetAddress}}\",\n                \"country_code\": \"US\",\n                \"postcode\": \"58888\",\n                \"state\": \"FL\",\n                \"suburb\": \"{{$randomCity}}\"\n            },\n            \"business_identifiers\": [\n                {\n                    \"number\": \"123456789\",\n                    \"type\": \"BRN\"\n                },\n                {\n                    \"country_code\": \"US\",\n                    \"number\": \"123456789\",\n                    \"type\": \"EIN\"\n                }\n            ],\n            \"business_name\": \"{{$randomCompanyName}} US\",\n            \"business_structure\": \"COMPANY\",\n            \"description_of_goods_or_services\": \"{{$randomLoremSentence}}\",\n            \"industry_category_code\": \"ICCV3_000300\",\n            \"operating_country\": [\n                \"US\"\n            ],\n            \"registration_address\": {\n                \"address_line1\": \"{{$randomStreetAddress}}\",\n                \"country_code\": \"US\",\n                \"postcode\": \"58888\",\n                \"state\": \"FL\",\n                \"suburb\": \"{{$randomCity}}\"\n            },\n            \"url\": \"https://www.google.com/\"\n        },\n        \"business_person_details\": [\n            {\n                \"attachments\": {\n                    \"business_person_documents\": [\n                        {\n                            \"file_id\": \"{{file_id}}\",\n                            \"tag\": \"SUPPORTIVE_OTHER\"\n                        }\n                    ]\n                },\n                \"date_of_birth\": \"1970-01-01\",\n                \"email\": \"{{$randomEmail}}\",\n                \"first_name\": \"{{$randomFirstName}}\",\n                \"identifications\": {\n                    \"primary\": {\n                        \"identification_type\": \"PERSONAL_ID\",\n                        \"issuing_country_code\": \"US\",\n                        \"personal_id\": {\n                            \"front_file_id\": \"{{file_id}}\",\n                            \"number\": \"123456789\"\n                        }\n                    }\n                },\n                \"last_name\": \"{{$randomLastName}}\",\n                \"nationality\": \"US\",\n                \"residential_address\": {\n                    \"address_line1\": \"{{$randomStreetAddress}}\",\n                    \"country_code\": \"US\",\n                    \"postcode\": \"58888\",\n                    \"state\": \"FL\",\n                    \"suburb\": \"{{$randomCity}}\"\n                },\n                \"roles\": [\n                    \"DIRECTOR\",\n                    \"CONTROLLING_PERSON\",\n                    \"AUTHORISED_PERSON\"\n                ]\n            }\n        ]\n    },\n    \"customer_agreements\": {\n        \"agreed_to_data_usage\": true,\n        \"agreed_to_terms_and_conditions\": true,\n        \"opt_in_for_marketing\": false\n    },\n    \"nickname\": \"{{$randomFullName}} US\",\n    \"primary_contact\": {\n        \"attachments\": {\n            \"identity_files\": []\n        },\n        \"email\": \"{{$randomEmail}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/accounts/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a connected account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_details\": {\n        \"beneficial_owners\": [\n            {\n                \"identification_type\": \"PERSONAL_ID\",\n                \"nationality\": \"CN\",\n                \"attachments\": {\n                    \"identity_files\": [\n                        {\n                            \"description\": \"{{filename}}\",\n                            \"file_id\": \"{{file_id}}\",\n                            \"tag\": \"PERSONAL_ID_FRONT\"\n                        },\n                        {\n                            \"description\": \"{{filename}}\",\n                            \"file_id\": \"{{file_id}}\",\n                            \"tag\": \"PERSONAL_ID_BACK\"\n                        }\n                    ]\n                }\n            }\n        ],\n        \"business_details\": {\n            \"address\": {\n                \"country_code\": \"CN\"\n            },\n            \"industry_category\": \"E-Commerce - Merchant\",\n            \"purpose\": \"Payment to service providers - Shipping & Delivery Companies/Agencies\",\n            \"url\": \"http://www.example.com\",\n            \"attachments\": {\n                \"business_documents\": [\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"BUSINESS_LICENSE\"\n                    }\n                ]\n            }\n        },\n        \"legal_rep_details\": {\n            \"attachments\": {\n                \"identity_files\": [\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"PERSONAL_ID_FRONT\"\n                    },\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"PERSONAL_ID_BACK\"\n                    }\n                ]\n            },\n            \"identification_type\": \"PERSONAL_ID\",\n            \"nationality\": \"CN\"\n        }\n    },\n    \"account_usage\": {\n        \"card_usage\": [\n            \"NONE\"\n        ],\n        \"collection_country_codes\": [\n            \"CN\"\n        ],\n        \"collection_from\": [\n            \"CLIENTS_AND_OTHER_THIRD_PARTIES\"\n        ],\n        \"expected_monthly_transaction_volume\": {\n            \"amount\": \"100000.0\"\n        },\n        \"payout_country_codes\": [\n            \"CN\"\n        ],\n        \"payout_to\": [\n            \"CONNECTED_AWX_ACCOUNT\",\n            \"VENDORS_SUPPLIERS_OR_OTHER_THIRD_PARTY_BANK_ACCOUNT\",\n            \"WITHDRAWAL_TO_BANK_ACCOUNT_UNDER_THE_SAME_NAME\"\n        ]\n    },\n    \"customer_agreements\": {\n        \"agreed_to_data_usage\": true,\n        \"agreed_to_terms_and_conditions\": true,\n        \"opt_in_for_marketing\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/accounts/:connected_account_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":connected_account_id",
										"update"
									],
									"variable": [
										{
											"key": "connected_account_id",
											"value": "{{connected_account_id}}",
											"description": "(Required) Airwallex account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submit account for activation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts/:connected_account_id/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":connected_account_id",
										"submit"
									],
									"variable": [
										{
											"key": "connected_account_id",
											"value": "{{connected_account_id}}",
											"description": "(Required) Airwallex account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Agree to terms and conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts/:connected_account_id/terms_and_conditions/agree",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":connected_account_id",
										"terms_and_conditions",
										"agree"
									],
									"variable": [
										{
											"key": "connected_account_id",
											"value": "{{connected_account_id}}",
											"description": "(Required) Airwallex account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an account - Individual",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"connected_account_id\", JSON.parse(pm.response.text()).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_details\": {\n        \"individual_details\": {\n            \"address\": {\n                \"address_line1\": \"{{$randomStreetAddress}}\",\n                \"country_code\": \"HK\",\n                \"postcode\": \"25000\",\n                \"state\": \"{{$randomCity}}\",\n                \"suburb\": \"{{$randomCity}}\"\n            },\n            \"date_of_birth\": \"2000-01-01\",\n            \"first_name\": \"John\",\n            \"first_name_english\": \"John\",\n            \"last_name\": \"Doe\",\n            \"last_name_english\": \"Doe\",\n            \"photo_file_id\": \"{{file_id}}\",\n            \"nationality\": \"HK\",\n            \"primary_identification\": {\n                \"identification_type\": \"PERSONAL_ID\",\n                \"issuing_country_code\": \"HK\",\n                \"personal_id\": {\n                    \"front_file_id\": \"{{file_id}}\"\n                }\n            },\n            \"user_id_on_platform\": \"dummy_external_id_{{$guid}}\"\n        },\n        \"legal_entity_type\": \"INDIVIDUAL\"\n    },\n    \"account_usage\": {\n        \"card_usage\": [\n            \"PERSONAL_SPENDING\"\n        ],\n        \"collection_country_codes\": [\n            \"HK\"\n        ],\n        \"collection_from\": [\n            \"SELF_TOP_UP\"\n        ],\n        \"expected_monthly_transaction_volume\": {\n            \"amount\": \"5000\"\n        },\n        \"payout_country_codes\": [\n            \"HK\"\n        ],\n        \"payout_to\": [\n            \"OWN_BANK_ACCOUNT\"\n        ]\n    },\n    \"customer_agreements\": {\n        \"agreed_to_data_usage\": true,\n        \"agreed_to_terms_and_conditions\": true\n    },\n    \"primary_contact\": {\n        \"email\": \"test+{{$guid}}@example.com\",\n        \"mobile\": \"{{$randomPhoneNumber}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/accounts/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get account by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts/:connected_account_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":connected_account_id"
									],
									"variable": [
										{
											"key": "connected_account_id",
											"value": "{{connected_account_id}}",
											"description": "(Required) Airwallex account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of connected accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "account_status",
											"value": "",
											"description": "The status of the account. Can be CREATED, SUBMITTED, ACTION_REQUIRED, ACTIVE, SUSPENDED",
											"disabled": true
										},
										{
											"key": "email",
											"value": "",
											"description": "The primary email to be associated with the administration of the account",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "identifier",
											"value": "",
											"description": "The identifier that the platform uses to identify a merchant, usually a unique merchant ID.",
											"disabled": true
										},
										{
											"key": "metadata",
											"value": "",
											"description": "The metadata of the account. The value should be set in key:value format. (e.g., id:1)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100., maximum 500",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve account details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Charges",
					"item": [
						{
							"name": "Create a new charge",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"connected_account_id\") === \"\") {",
											"    request_url = pm.collectionVariables.get(\"url\") + \"/api/v1/accounts\";",
											"    console.warn(`The variable 'connected_account_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: { \"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\") }",
											"    }, function (err, res) {",
											"        active_account = res.json().items.find((x) => x.status === \"ACTIVE\");",
											"        if (active_account != undefined) {",
											"            console.info(`Defaulting 'connected_account_id' to the first ACTIVE account ${active_account.id}`);",
											"            pm.environment.set(\"connected_account_id\", active_account.id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'connected_account_id' is not set, and cannot set a default, as there is no ACTIVE account returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"10\",\n    \"currency\": \"USD\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Postman Test - {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source\": \"{{connected_account_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/charges/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"charges",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of charges",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/charges",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"charges"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Currency (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100., minimum 10, maximum 2000",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "",
											"description": "Charge request_id",
											"disabled": true
										},
										{
											"key": "source",
											"value": "",
											"description": "Airwallex account ID",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the charge, one of: NEW, PENDING, SETTLED,SUSPENDED",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a charge by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let charge_id = pm.environment.get(\"charge_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof charge_id === \"undefined\" || charge_id === \"\") {",
											"    request_url = pm.collectionVariables.get(\"url\") + \"/api/v1/charges\";",
											"    console.warn(`Environment variable 'charge_id' is not set, calling ${request_url} to default it.`);",
											"    ",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: {\"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\")}",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'charge_id' to the first charge ${res.json().items[0].id}`);",
											"            pm.variables.set(\"charge_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            console.error(\"Environment variable 'charge_id' is not set, and cannot set a default, as there is no charge returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/charges/:charge_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"charges",
										":charge_id"
									],
									"variable": [
										{
											"key": "charge_id",
											"value": "{{charge_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Hosted Flow",
					"item": [
						{
							"name": "Create flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"hosted_flow_instance_id\", JSON.parse(pm.response.text()).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_id\": \"{{connected_account_id}}\",\n    \"template\": \"{{hosted_flow_template_id}}\",\n    \"return_url\": \"{{$randomUrl}}\",\n    \"error_url\": \"{{$randomUrl}}\",\n    \"metadata\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/hosted_flows/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"hosted_flows",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get flow",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/hosted_flows/:hosted_flow_instance_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"hosted_flows",
										":hosted_flow_instance_id"
									],
									"variable": [
										{
											"key": "hosted_flow_instance_id",
											"value": "{{hosted_flow_instance_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorize flow",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identity\": \"external_user_{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/hosted_flows/:hosted_flow_instance_id/authorize",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"hosted_flows",
										":hosted_flow_instance_id",
										"authorize"
									],
									"variable": [
										{
											"key": "hosted_flow_instance_id",
											"value": "{{hosted_flow_instance_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transfers",
					"item": [
						{
							"name": "Create a new transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"10\",\n    \"currency\": \"USD\",\n    \"destination\": \"{{connected_account_id}}\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Postman Test - {{$guid}}\",\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/transfers/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of transfers",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/transfers",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Currency (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "destination",
											"value": "",
											"description": "Airwallex account ID",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100., minimum 10, maximum 2000",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "",
											"description": "Transfer request_id",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the transfer. One of: NEW, SETTLED",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a transfer by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"transfer_id = pm.environment.get(\"transfer_id\") || \"\";",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof transfer_id === \"undefined\" || transfer_id === \"\") {",
											"    request_url = pm.collectionVariables.get(\"url\") + \"/api/v1/transfers\";",
											"    console.warn(`Environment variable 'transfer_id' is not set, calling ${request_url} to default it.`);",
											"    ",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: {\"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\")}",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'transfer_id' to the first transfer ${res.json().items[0].id}`);",
											"            pm.variables.set(\"transfer_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            console.error(\"Environment variable 'transfer_id' is not set, and cannot set a default, as there is no transfer returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/transfers/:transfer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers",
										":transfer_id"
									],
									"variable": [
										{
											"key": "transfer_id",
											"value": "{{transfer_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Online Payments",
			"item": [
				{
					"name": "Config",
					"item": [
						{
							"name": "Retrieve available payment method types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/pa/config/payment_method_types?active=true&country_code=CN&transaction_currency=CNY&transaction_mode=oneoff",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"config",
										"payment_method_types"
									],
									"query": [
										{
											"key": "active",
											"value": "true",
											"description": "Indicate whether the payment method type is active"
										},
										{
											"key": "country_code",
											"value": "CN",
											"description": "The supported country code."
										},
										{
											"key": "transaction_currency",
											"value": "CNY",
											"description": "The supported transaction currency. transaction_currency is required when country_code is given."
										},
										{
											"key": "transaction_mode",
											"value": "oneoff",
											"description": "The supported transaction mode. One of oneoff, recurring."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve bank names for certain payment method types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/pa/config/banks?payment_method_type=bank_transfer&country_code=MY",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"config",
										"banks"
									],
									"query": [
										{
											"key": "payment_method_type",
											"value": "bank_transfer",
											"description": "The payment method type to find the available banks. One of fpx, bank_transfer, online_banking. For other payment methods that does not require bank_name, an empty list will be returned."
										},
										{
											"key": "country_code",
											"value": "MY",
											"description": "Country code to filter the available banks. Use the two-character ISO Standard Country Codes.\n\nFor payment method type like online_banking and bank_transfer, the available bank list differs in different countries and country_code is needed to get the bank list.\n\nFor other payment method types, country_code will be ignored."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "Create a Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"customer_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"merchant_customer_id\": \"merchant_{{$guid}}\",\n    \"first_name\": \"{{$randomFirstName}}\",\n    \"last_name\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"phone_number\": \"{{$randomPhoneNumber}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/:customer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "{{customer_id}}",
											"description": "(Required) Customer ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: BASE_URL + \"/api/v1/pa/customers/\" + pm.variables.get(\"customer_id\"),",
											"    method: \"GET\",",
											"    header: UTILITY.getRequestHeader()",
											"}, function (err, res) {",
											"    pm.variables.set(\"merchant_customer_id\", res.json().merchant_customer_id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"merchant_customer_id\": \"{{merchant_customer_id}}\",\n    \"first_name\": \"{{$randomFirstName}}\",\n    \"last_name\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"phone_number\": \"{{$randomPhoneNumber}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/:customer_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										":customer_id",
										"update"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "{{customer_id}}",
											"description": "(Required) Customer ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate a client secret for a Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/:customer_id/generate_client_secret",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										":customer_id",
										"generate_client_secret"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "{{customer_id}}",
											"description": "(Required) Customer ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of Customers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/customers",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "merchant_customer_id",
											"value": "",
											"description": "The customer ID on merchant side",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of Customers to be listed per page",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":customer_id\"))",
									"    return;",
									"",
									"let customer_id = pm.environment.get(\"customer_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof customer_id === \"undefined\" || customer_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/pa/customers\";",
									"    console.warn(`Environment variable 'customer_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'customer_id' to the first customer ${res.json().items[0].id}`);",
									"            pm.variables.set(\"customer_id\", res.json().items[0].id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'customer_id' is not set, and cannot set a default, as there is no customer returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Customs Declarations",
					"item": [
						{
							"name": "Create a customs declaration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?currency=CNY&status=SUCCEEDED\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no SUCCESS CNY payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_intent_id\": \"{{payment_intent_id}}\",\n    \"customs_details\": {\n        \"customs_code\": \"GUANGZHOU_ZS\",\n        \"merchant_customs_name\": \"{{$randomCompanyName}}\",\n        \"merchant_customs_number\": \"{{$randomInt}}\"\n    },\n    \"shopper_details\": {\n        \"shopper_id\": \"310101200001010000\",\n        \"shopper_name\": \"{{$randomFullName}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/customs_declarations/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customs_declarations",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fund Splits",
					"item": [
						{
							"name": "Create a FundsSplit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/* let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"request_url = BASE_URL + \"/api/v1/pa/payment_intents/create\";",
											"console.info(`Calling ${request_url} to default to create a payment intent.`);",
											"",
											"let request_headers = UTILITY.getRequestHeader()",
											"request_headers[\"Content-Type\"] = \"application/json\"",
											"",
											"// Create payment intent",
											"pm.sendRequest({",
											"    url: request_url,",
											"    method: \"POST\",",
											"    header: request_headers,",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"        \"request_id\": pm.variables.replaceIn(\"{{$guid}}\"),",
											"        \"amount\": 100,",
											"        \"currency\": \"CNY\",",
											"        \"merchant_order_id\": pm.variables.replaceIn(\"{{$guid}}\"),",
											"        \"payment_method_options\": {",
											"            \"card\": {",
											"            }",
											"        },",
											"        \"risk_control_options\": {",
											"            \"skip_risk_processing\": true",
											"        },",
											"        \"return_url\": pm.variables.replaceIn(\"{{$randomUrl}}\")",
											"    })",
											"    }",
											"}, function (err, res) {",
											"    if (typeof res.json().id !== \"undefined\") {",
											"        console.info(`Defaulting 'payment_intent_id' to the payment intent ${res.json().id}`);",
											"        pm.variables.set(\"payment_intent_id\", res.json().id);",
											"        pm.variables.set(\"fund_split_amount\", res.json().amount / 2);",
											"",
											"        confirmPaymentIntent();",
											"    }",
											"    else {",
											"        throw new Error(\"Coult not create a payment intent.\");",
											"    }",
											"});",
											"",
											"// Confirm payment intent",
											"",
											"function confirmPaymentIntent(){",
											"    let request_url = BASE_URL + `/api/v1/pa/payment_intents/${pm.variables.get(\"payment_intent_id\")}/confirm`;",
											"    console.info(`Calling ${request_url} to confirm the payment intent.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"POST\",",
											"        header: request_headers,",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"            \"request_id\": pm.variables.replaceIn(\"{{$guid}}\"),",
											"            \"payment_method\": {",
											"                \"type\": \"card\",",
											"                \"card\": {",
											"                    \"billing\": {",
											"                        \"address\": {",
											"                            \"city\": pm.variables.replaceIn(\"{{$randomCity}}\"),",
											"                            \"country_code\": \"US\",",
											"                            \"postcode\": \"25000\",",
											"                            \"state\": pm.variables.replaceIn(\"{{$randomCity}}\"),",
											"                            \"street\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")",
											"                        },",
											"                        \"first_name\": pm.variables.replaceIn(\"{{$randomFirstName}}\"),",
											"                        \"last_name\": pm.variables.replaceIn(\"{{$randomLastName}}\")",
											"                    },",
											"                    \"expiry_month\": \"12\",",
											"                    \"expiry_year\": \"2030\",",
											"                    \"number\": \"4111111111111111\",",
											"                    \"cvc\": \"123\"",
											"                }",
											"            }",
											"        })",
											"        }",
											"    }, function (err, res) {",
											"        if(err) {",
											"            throw new Error(\"Coult not confirm the payment intent.\");",
											"        }",
											"        else {",
											"            console.info(`payment_intent_id' status is ${res.json().status}`);",
											"        }",
											"    });",
											"}*/",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"            pm.variables.set(\"fund_split_amount\", res.json().items[0].amount / 2);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no payment intent returned.\");",
											"        }",
											"    });",
											"}",
											"else {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents/\" + payment_intent_id;",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().amount !== undefined) {",
											"            pm.variables.set(\"fund_split_amount\", res.json().amount / 2);",
											"        }",
											"        else {",
											"            throw new Error(`No payment intent found for the payment_intent_id '${payment_intent_id}'.`);",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"fund_split_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"source_id\": \"{{payment_intent_id}}\",\n    \"source_type\": \"PAYMENT_INTENT\",\n    \"amount\": {{fund_split_amount}},\n    \"destination\": \"{{connected_account_id}}\",\n    \"auto_release\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/funds_splits/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"funds_splits",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a FundsSplit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let fund_split_id = pm.environment.get(\"fund_split_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof fund_split_id === \"undefined\" || fund_split_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/funds_splits\";",
											"    console.warn(`Environment variable 'fund_split_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'fund_split_id' to the first fund split ${res.json().items[0].id}`);",
											"            pm.variables.set(\"fund_split_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'fund_split_id' is not set, and cannot set a default, as there is no fund split returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/funds_splits/:fund_split_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"funds_splits",
										":fund_split_id"
									],
									"variable": [
										{
											"key": "fund_split_id",
											"value": "{{fund_split_id}}",
											"description": "(Required) FundsSplit Id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of FundsSplits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/funds_splits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"funds_splits"
									],
									"query": [
										{
											"key": "page_number",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of Fund Splits to be listed per page",
											"disabled": true
										},
										{
											"key": "source_id",
											"value": "",
											"description": "ID of which source this split would be created from. Currently only payment_intent_id is supported.",
											"disabled": true
										},
										{
											"key": "source_type",
											"value": "",
											"description": "Type of the source for this split. Currently only PAYMENT_INTENT is supported",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Release a FundsSplit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let fund_split_id = pm.environment.get(\"fund_split_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof fund_split_id === \"undefined\" || fund_split_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/funds_splits\";",
											"    console.warn(`Environment variable 'fund_split_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        let fund_split = res.json().items !== undefined ? res.json().items.find((x) => x.status === \"CREATED\") : undefined;",
											"        if (fund_split !== undefined) {",
											"            console.info(`Defaulting 'fund_split_id' to the first CREATED fund split ${fund_split.id}`);",
											"            pm.variables.set(\"fund_split_id\", fund_split.id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'fund_split_id' is not set, and cannot set a default, as there is no fund split returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 404 expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/funds_splits/:fund_split_id/release",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"funds_splits",
										":fund_split_id",
										"release"
									],
									"variable": [
										{
											"key": "fund_split_id",
											"value": "{{fund_split_id}}",
											"description": "(Required) FundsSplit Id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment Attempts",
					"item": [
						{
							"name": "Retrieve a PaymentAttempt by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_attempt_id = pm.environment.get(\"payment_attempt_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_attempt_id === \"undefined\" || payment_attempt_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_attempts\";",
											"    console.warn(`Environment variable 'payment_attempt_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_attempt_id' to the first payment attempt ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_attempt_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_attempt_id' is not set, and cannot set a default, as there is no payment attempt returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_attempts/:payment_attempt_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_attempts",
										":payment_attempt_id"
									],
									"variable": [
										{
											"key": "payment_attempt_id",
											"value": "{{payment_attempt_id}}",
											"description": "(Required) PaymentAttempt ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve list of PaymentAttempts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_attempts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_attempts"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "PaymentAttempt currency",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of PaymentAttempts to be listed per page",
											"disabled": true
										},
										{
											"key": "payment_intent_id",
											"value": "",
											"description": "PaymentIntent ID of the attempt",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "PaymentAttempt status",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment Consents",
					"item": [
						{
							"name": "Create a PaymentConsent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let customer_id = pm.environment.get(\"customer_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof customer_id === \"undefined\" || customer_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/customers\";",
											"    console.warn(`Environment variable 'customer_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'customer_id' to the first customer ${res.json().items[0].id}`);",
											"            pm.variables.set(\"customer_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'customer_id' is not set, and cannot set a default, as there is no customer returned.\");",
											"        }",
											"    });",
											"}",
											"",
											"let payment_method_id = pm.environment.get(\"payment_method_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_method_id === \"undefined\" || payment_method_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_methods?type=card\";",
											"    console.warn(`Environment variable 'payment_method_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        let payment_method = res.json().items !== undefined ? res.json().items.find((x) => x.status !== \"DISABLED\") : undefined;",
											"        if (payment_method !== undefined) {",
											"            console.info(`Defaulting 'payment_method_id' to the first ACTIVE CARD payment method ${payment_method.id}`);",
											"            pm.variables.set(\"payment_method_id\", payment_method.id);",
											"        }",
											"        else {",
											"            console.error(\"Environment variable 'payment_method_id' is not set, and cannot set a default, as there is no ACTIVE CARD payment method returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"payment_consent_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customer_id\": \"{{customer_id}}\",\n  \"merchant_trigger_reason\": \"unscheduled\",\n  \"next_triggered_by\": \"merchant\",\n  \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a PaymentConsent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"metadata\": {\n    \"test\": \"test\"\n  },\n  \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents/:payment_consent_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents",
										":payment_consent_id",
										"update"
									],
									"variable": [
										{
											"key": "payment_consent_id",
											"value": "{{payment_consent_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable a PaymentConsent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents/:payment_consent_id/disable",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents",
										":payment_consent_id",
										"disable"
									],
									"variable": [
										{
											"key": "payment_consent_id",
											"value": "{{payment_consent_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify a PaymentConsent - Card",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"request_id\": \"{{$randomUUID}}\",\n    \"payment_method\": {\n        \"type\": \"card\",\n        \"card\": {\n            \"billing\": {\n                \"address\": {\n                    \"city\": \"{{$randomCity}}\",\n                    \"country_code\": \"US\",\n                    \"postcode\": \"10001\",\n                    \"state\": \"{{$randomCity}}\",\n                    \"street\": \"{{$randomStreetAddress}}\"\n                },\n                \"first_name\": \"{{$randomFirstName}}\",\n                \"last_name\": \"{{$randomLastName}}\"\n            },\n            \"cvc\": \"123\",\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"2030\",\n            \"number\": \"4035501000000008\"\n        }\n    },\n    \"verification_options\": {\n        \"card\": {\n            \"currency\": \"USD\"\n        }\n    },\n    \"descriptor\": \"Airwallex\",\n    \"return_url\": \"https://www.airwallex.com\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents/:id/verify",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents",
										":id",
										"verify"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{payment_consent_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify a PaymentConsent - ACH/Plaid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"request_id\": \"{{$randomUUID}}\",\n    \"payment_method\": {\n        \"type\": \"ach_direct_debit\",\n        \"ach_direct_debit\": {\n            \"business_account\": true,\n            \"verification_method\": \"plaid\"\n        }\n    },\n    \"descriptor\": \"Airwallex\",\n    \"return_url\": \"https://www.airwallex.com\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents/:id/verify",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents",
										":id",
										"verify"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{payment_consent_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify a PaymentConsent - ACH/Micro Deposit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"request_id\": \"{{$randomUUID}}\",\n    \"payment_method\": {\n        \"type\": \"ach_direct_debit\",\n        \"ach_direct_debit\": {\n            \"aba_routing_number\": \"011401533\",\n            \"account_number\": \"11112222233330000\",\n            \"business_account\": false,\n            \"owner_name\": \"Alberta Bobbeth Charleson\",\n            \"owner_email\": \"test@demo.com\",\n            \"verification_method\": \"micro_deposit\"\n        }\n    },\n    \"descriptor\": \"Airwallex\",\n    \"return_url\": \"https://www.airwallex.com\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents/:id/verify",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents",
										":id",
										"verify"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{payment_consent_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Continue to Verify a PaymentConsent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"micro_deposit\": {\n    \"amounts\": [\n      0.01,\n      0.02\n    ]\n  },\n  \"request_id\": \"{{$guid}}\",\n  \"type\": \"verify_micro_deposits\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents/:payment_consent_id/verify_continue",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents",
										":payment_consent_id",
										"verify_continue"
									],
									"variable": [
										{
											"key": "payment_consent_id",
											"value": "{{payment_consent_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a PaymentConsent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents/:payment_consent_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents",
										":payment_consent_id"
									],
									"variable": [
										{
											"key": "payment_consent_id",
											"value": "{{payment_consent_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of PaymentConsents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents"
									],
									"query": [
										{
											"key": "customer_id",
											"value": "",
											"description": "The unique identifier of a customer",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "merchant_trigger_reason",
											"value": "",
											"description": "One of scheduled, unscheduled",
											"disabled": true
										},
										{
											"key": "next_triggered_by",
											"value": "",
											"description": "One of merchant, customer",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of PaymentConsent",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of PaymentConsents to be listed per page. Default: 10",
											"disabled": true
										},
										{
											"key": "purpose",
											"value": "",
											"description": "The purpose of the PaymentConsent. one of recurring and one_off",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment Intents",
					"item": [
						{
							"name": "Create a PaymentIntent - MVP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"payment_intent_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"amount\": 100,\n    \"currency\": \"USD\",\n    \"merchant_order_id\": \"Merchant_Order_{{$guid}}\",\n    \"return_url\": \"{{$randomUrl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a PaymentIntent - With More Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"payment_intent_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"amount\": 100,\n    \"currency\": \"USD\",\n    \"merchant_order_id\": \"Merchant_Order_{{$guid}}\",\n    \"metadata\": {\n        \"my_test_metadata_id\": \"my_test_metadata_id_{{$guid}}\"\n    },\n    \"order\": {\n        \"products\": [\n            {\n                \"code\": \"3414314111\",\n                \"desc\": \"iPhone\",\n                \"name\": \"iPhone\",\n                \"quantity\": 1,\n                \"sku\": \"iPhone_001\",\n                \"type\": \"Mobile Phone - iPhone\",\n                \"unit_price\": 1499.99,\n                \"url\": \"{{$randomUrl}}\"\n            }\n        ],\n        \"shipping\": {\n            \"address\": {\n                \"city\": \"{{$randomCity}}\",\n                \"country_code\": \"CN\",\n                \"postcode\": \"25000\",\n                \"state\": \"{{$randomCity}}\",\n                \"street\": \"{{$randomStreetAddress}}\"\n            },\n            \"first_name\": \"{{$randomFirstName}}\",\n            \"last_name\": \"{{$randomLastName}}\",\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\n            \"shipping_method\": \"DHL\"\n        },\n        \"type\": \"Online Mobile Phone Purchases\"\n    },\n    \"return_url\": \"{{$randomUrl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a PaymentIntent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id"
									],
									"variable": [
										{
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm a PaymentIntent - payment_method = card",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_PAYMENT_METHOD\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_PAYMENT_METHOD payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_PAYMENT_METHOD payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_method\": {\n        \"type\": \"card\",\n        \"card\": {\n            \"billing\": {\n                \"address\": {\n                    \"city\": \"{{$randomCity}}\",\n                    \"country_code\": \"US\",\n                    \"postcode\": \"25000\",\n                    \"state\": \"{{$randomCity}}\",\n                    \"street\": \"{{$randomStreetAddress}}\"\n                },\n                \"first_name\": \"{{$randomFirstName}}\",\n                \"last_name\": \"{{$randomLastName}}\"\n            },\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"2030\",\n            \"number\": \"4111111111111111\",\n            \"cvc\": \"123\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/confirm",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"confirm"
									],
									"variable": [
										{
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm a PaymentIntent - auto_capture = false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_PAYMENT_METHOD\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_PAYMENT_METHOD payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_PAYMENT_METHOD payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_method\": {\n        \"type\": \"card\",\n        \"card\": {\n            \"billing\": {\n                \"address\": {\n                    \"city\": \"{{$randomCity}}\",\n                    \"country_code\": \"US\",\n                    \"postcode\": \"25000\",\n                    \"state\": \"{{$randomCity}}\",\n                    \"street\": \"{{$randomStreetAddress}}\"\n                },\n                \"first_name\": \"{{$randomFirstName}}\",\n                \"last_name\": \"{{$randomLastName}}\"\n            },\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"2030\",\n            \"number\": \"4111111111111111\",\n            \"cvc\": \"123\"\n        }\n    },\n    \"payment_method_options\": {\n        \"card\": {\n            \"auto_capture\": false\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/confirm",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"confirm"
									],
									"variable": [
										{
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm a PaymentIntent - Trigger Netcetera 3DS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_PAYMENT_METHOD\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_PAYMENT_METHOD payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_PAYMENT_METHOD payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_method\": {\n        \"type\": \"card\",\n        \"card\": {\n            \"billing\": {\n                \"address\": {\n                    \"city\": \"{{$randomCity}}\",\n                    \"country_code\": \"US\",\n                    \"postcode\": \"25000\",\n                    \"state\": \"{{$randomCity}}\",\n                    \"street\": \"{{$randomStreetAddress}}\"\n                },\n                \"first_name\": \"{{$randomFirstName}}\",\n                \"last_name\": \"{{$randomLastName}}\"\n            },\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"2030\",\n            \"number\": \"5424184049821670\",\n            \"cvc\": \"123\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/confirm",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"confirm"
									],
									"variable": [
										{
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Continue to confirm a PaymentIntent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_CUSTOMER_ACTION\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_CUSTOMER_ACTION payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_CUSTOMER_ACTION payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request_id\": \"{{$guid}}\",\n  \"type\": \"3ds_continue\",\n  \"use_dcc\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/confirm_continue",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"confirm_continue"
									],
									"variable": [
										{
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Capture a PaymentIntent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_CAPTURE\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_CAPTURE payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"            pm.variables.set(\"payment_intent_amount\", res.json().items[0].amount);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_CAPTURE payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"amount\": \"100\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/capture",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"capture"
									],
									"variable": [
										{
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of PaymentIntents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "PaymentIntent currency",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "merchant_order_id",
											"value": "",
											"description": "Merchant Order ID",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of PaymentIntents to be listed per page",
											"disabled": true
										},
										{
											"key": "payment_consent_id",
											"value": "",
											"description": "Payment Consent ID",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "PaymentIntent status",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Payment Links",
					"item": []
				},
				{
					"name": "Payment Methods",
					"item": [
						{
							"name": "Create a PaymentMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"payment_method_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"type\": \"card\",\n    \"card\": {\n        \"billing\": {\n            \"address\": {\n                \"city\": \"{{$randomCity}}\",\n                \"country_code\": \"US\",\n                \"state\": \"{{$randomCity}}\",\n                \"street\": \"{{$randomStreetAddress}}\"\n            },\n            \"first_name\": \"{{$randomFirstName}}\",\n            \"last_name\": \"{{$randomLastName}}\"\n        },\n        \"expiry_month\": \"12\",\n        \"expiry_year\": \"2030\",\n        \"number\": \"4111111111111111\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a PaymentMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods/:payment_method_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods",
										":payment_method_id"
									],
									"variable": [
										{
											"key": "payment_method_id",
											"value": "{{payment_method_id}}",
											"description": "(Required) PaymentMethod ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a PaymentMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"type\": \"card\",\n    \"card\": {\n        \"billing\": {\n            \"address\": {\n                \"city\": \"{{$randomCity}}\",\n                \"country_code\": \"US\",\n                \"state\": \"{{$randomCity}}\",\n                \"street\": \"{{$randomStreetAddress}}\"\n            },\n            \"first_name\": \"{{$randomFirstName}}\",\n            \"last_name\": \"{{$randomLastName}}\"\n        },\n        \"expiry_month\": \"12\",\n        \"expiry_year\": \"2030\",\n        \"number\": \"4111111111111111\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods/:payment_method_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods",
										":payment_method_id",
										"update"
									],
									"variable": [
										{
											"key": "payment_method_id",
											"value": "{{payment_method_id}}",
											"description": "(Required) PaymentMethod ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of PaymentMethods",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods"
									],
									"query": [
										{
											"key": "customer_id",
											"value": "",
											"description": "Customer ID of the PaymentMethods",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of PaymentMethods to be listed per page",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "type",
											"value": "",
											"description": "PaymentMethod type",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable a PaymentMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods/:payment_method_id/disable",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods",
										":payment_method_id",
										"disable"
									],
									"variable": [
										{
											"key": "payment_method_id",
											"value": "{{payment_method_id}}",
											"description": "(Required) PaymentMethod ID"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":payment_method_id\"))",
									"    return;",
									"",
									"let payment_method_id = pm.environment.get(\"payment_method_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof payment_method_id === \"undefined\" || payment_method_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/pa/payment_methods\";",
									"    console.warn(`Environment variable 'payment_method_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        active_payment_method = res.json().items !== undefined ? res.json().items.find((x) => x.status !== \"DISABLED\") : undefined;",
									"        if (active_payment_method !== undefined) {",
									"            console.info(`Defaulting 'payment_method_id' to the first ACTIVE payment method ${active_payment_method.id}`);",
									"            pm.variables.set(\"payment_method_id\", active_payment_method.id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'payment_method_id' is not set, and cannot set a default, as there is no ACTIVE payment method returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Refunds",
					"item": [
						{
							"name": "Create a Refund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=SUCCEEDED\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no SUCCESS payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_intent_id\": \"{{payment_intent_id}}\",\n    \"reason\": \"Postman Test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/refunds/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"refunds",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a Refund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let refund_id = pm.environment.get(\"refund_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof refund_id === \"undefined\" || refund_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/refunds\";",
											"    console.warn(`Environment variable 'refund_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'refund_id' to the first refund ${res.json().items[0].id}`);",
											"            pm.variables.set(\"refund_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'refund_id' is not set, and cannot set a default, as there is no refund returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/refunds/:refund_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"refunds",
										":refund_id"
									],
									"variable": [
										{
											"key": "refund_id",
											"value": "{{refund_id}}",
											"description": "(Required) Refund ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of Refunds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/refunds",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"refunds"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Refund currency",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of Refunds to be listed per page",
											"disabled": true
										},
										{
											"key": "payment_attempt_id",
											"value": "",
											"description": "PaymentAttempt ID of the Refunds",
											"disabled": true
										},
										{
											"key": "payment_intent_id",
											"value": "",
											"description": "PaymentIntent ID of the Refunds",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Refund status",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Reporting",
			"item": [
				{
					"name": "Financial Reports",
					"item": [
						{
							"name": "Get list of financial reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/finance/financial_reports",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"finance",
										"financial_reports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get financial report by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let report_id = pm.environment.get(\"report_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof report_id === \"undefined\" || report_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/finance/financial_reports\";",
											"    console.warn(`Environment variable 'report_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'report_id' to the first transaction ${res.json().items[0].id}`);",
											"            pm.variables.set(\"report_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'report_id' is not set, and cannot set a default, as there is no financial transaction returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/finance/financial_reports/:report_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"finance",
										"financial_reports",
										":report_id"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "{{report_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contents of a financial report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let report_id = pm.environment.get(\"report_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof report_id === \"undefined\" || report_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/finance/financial_reports\";",
											"    console.warn(`Environment variable 'report_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'report_id' to the first transaction ${res.json().items[0].id}`);",
											"            pm.variables.set(\"report_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'report_id' is not set, and cannot set a default, as there is no financial transaction returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/finance/financial_reports/:report_id/content",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"finance",
										"financial_reports",
										":report_id",
										"content"
									],
									"variable": [
										{
											"key": "report_id",
											"value": "{{report_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a financial report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"report_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_format\": \"CSV\",\n    \"from_date\": \"2022-02-01\",\n    \"to_date\": \"2022-05-31\",\n    \"type\": \"BALANCE_ACTIVITY_REPORT\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/finance/financial_reports/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"finance",
										"financial_reports",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Financial Transactions",
					"item": [
						{
							"name": "Get list of financial transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/financial_transactions?page_size=200&to_created_at=2022-01-25",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"financial_transactions"
									],
									"query": [
										{
											"key": "batch_id",
											"value": "",
											"description": "Batch ID of the financial transaction",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "2022-01-24",
											"description": "The start time of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "200",
											"description": "Number of results per page, default is 100, max is 1000"
										},
										{
											"key": "source_id",
											"value": "",
											"description": "The source ID of the transaction",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the financial transaction, one of: PENDING, SETTLED",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "2022-01-25",
											"description": "The end time of created_at in ISO8601 format (inclusive)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a financial transaction by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let financial_transaction_id = pm.environment.get(\"financial_transaction_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof financial_transaction_id === \"undefined\" || financial_transaction_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/financial_transactions\";",
											"    console.warn(`Environment variable 'financial_transaction_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'financial_transaction_id' to the first transaction ${res.json().items[0].id}`);",
											"            pm.variables.set(\"financial_transaction_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'financial_transaction_id' is not set, and cannot set a default, as there is no financial transaction returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/financial_transactions/:financial_transaction_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"financial_transactions",
										":financial_transaction_id"
									],
									"variable": [
										{
											"key": "financial_transaction_id",
											"value": "{{financial_transaction_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Settlements",
					"item": [
						{
							"name": "Get list of settlements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/financial/settlements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"financial",
										"settlements"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Currency of the settlement",
											"disabled": true
										},
										{
											"key": "from_settled_at",
											"value": "",
											"description": "The start date of settled_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page, default is 100, max is 1000",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the settlement, one of: PENDING, SETTLED",
											"disabled": true
										},
										{
											"key": "to_settled_at",
											"value": "",
											"description": "The end date of settled_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a settlement by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/financial/settlements/:settlement_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"financial",
										"settlements",
										":settlement_id"
									],
									"variable": [
										{
											"key": "settlement_id",
											"value": "{{settlement_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a settlement report by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/financial/settlements/:settlement_id/report",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"financial",
										"settlements",
										":settlement_id",
										"report"
									],
									"variable": [
										{
											"key": "settlement_id",
											"value": "{{settlement_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":settlement_id\"))",
									"    return;",
									"",
									"let settlement_id = pm.environment.get(\"settlement_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof settlement_id === \"undefined\" || settlement_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/pa/financial/settlements\";",
									"    console.warn(`Environment variable 'settlement_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'settlement_id' to the first settlement ${res.json().items[0].id}`);",
									"            pm.variables.set(\"settlement_id\", res.json().items[0].id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'settlement_id' is not set, and cannot set a default, as there is no settlement returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "The Financial Reports resources provide the capability to create and get the contents of reports on your Airwallex account's historical transaction activity."
		},
		{
			"name": "Simulation (Demo Only)",
			"item": [
				{
					"name": "Accounts",
					"item": [
						{
							"name": "Update status of connected account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"force\": true,\n    \"next_status\": \"ACTIVE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/simulation/accounts/:account_id/update_status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"accounts",
										":account_id",
										"update_status"
									],
									"variable": [
										{
											"key": "account_id",
											"value": "{{connected_account_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cards",
					"item": [
						{
							"name": "Create a transaction for the provided card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"issuing_transaction_id\", JSON.parse(responseBody).transaction_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"auth_code\": \"\",\n    \"card_id\": \"{{card_id}}\",\n    \"card_number\": \"{{card_number}}\",\n    \"merchant_category_code\": \"\",\n    \"merchant_info\": \"Airwallex Cards Simulation\",\n    \"transaction_amount\": 10.10,\n    \"transaction_currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/simulation/issuing/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"issuing",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Capture the transaction with the provided id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"merchant_info\": \"Example\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/simulation/issuing/:transaction_id/capture",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"issuing",
										":transaction_id",
										"capture"
									],
									"variable": [
										{
											"key": "transaction_id",
											"value": "{{issuing_transaction_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transfers",
					"item": [
						{
							"name": "Transition Transfer Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"next_status\": \"SENT\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/simulation/transfers/:transfer_id/transition",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"transfers",
										":transfer_id",
										"transition"
									],
									"variable": [
										{
											"key": "transfer_id",
											"value": "{{transfer_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deposits",
					"item": [
						{
							"name": "Create a global account deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201\", function () {",
											"    //pm.response.to.have.status(201);",
											"    var json = JSON.parse(pm.response.text());",
											"    pm.environment.set(\"deposit_id\",json.id)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"1000\",\n    \"global_account_id\": \"{{global_account_id}}\",\n    \"payer_bankname\": \"Postman Bank\",\n    \"payer_country\": \"US\",\n    \"payer_name\": \"Postman\",\n    \"reference\": \"Test from Postman\",\n    \"status\": \"SETTLED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/simulation/deposit/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"deposit",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject a direct debit deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/simulation/deposits/:deposit_id/reject",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"deposits",
										":deposit_id",
										"reject"
									],
									"variable": [
										{
											"key": "deposit_id",
											"value": "{{deposit_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reverse a direct debit deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/simulation/deposits/:deposit_id/reverse",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"deposits",
										":deposit_id",
										"reverse"
									],
									"variable": [
										{
											"key": "deposit_id",
											"value": "{{deposit_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Settle a direct debit deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/simulation/deposits/:deposit_id/settle",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"deposits",
										":deposit_id",
										"settle"
									],
									"variable": [
										{
											"key": "deposit_id",
											"value": "{{deposit_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Treasury",
			"item": [
				{
					"name": "Balances",
					"item": [
						{
							"name": "Get current balances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/balances/current",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"balances",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get balance history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/balances/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"balances",
										"history"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Currency",
											"disabled": true
										},
										{
											"key": "from_post_at",
											"value": "",
											"description": "The start date of posted_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0. Max: 10000",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Limit number of returned results. Min: 10, max: 2000, default: 100",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "",
											"description": "request_id from clients for the transaction",
											"disabled": true
										},
										{
											"key": "to_post_at",
											"value": "",
											"description": "The end date of posted_at in ISO8601 format (exclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deposits",
					"item": [
						{
							"name": "Get list of deposits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/deposits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a deposit by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/deposits/:deposit_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"deposits",
										":deposit_id"
									],
									"variable": [
										{
											"key": "deposit_id",
											"value": "{{deposit_id}}",
											"description": "The unique ID of the Deposit to retrieve"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a deposit via Direct Debit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201\", function () {",
											"    //pm.response.to.have.status(201);",
											"    var json = JSON.parse(pm.response.text());",
											"    pm.environment.set(\"deposit_id\",json.deposit_id)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": 1.99,\n  \"currency\": \"USD\",\n  \"deposit_type\": \"DIRECT_DEBIT\",\n  \"funding_source_id\": \"{{linked_account_id}}\",\n  \"reference\": \"test ref\",\n  \"request_id\": \"{{$randomUUID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/deposits/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"deposits",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Global Accounts",
					"item": [
						{
							"name": "Get a list of global accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/global_accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts"
									],
									"query": [
										{
											"key": "country_code",
											"value": "",
											"description": "country_code",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "",
											"description": "currency",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "nick_name",
											"value": "",
											"description": "nick_name",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "status of the account",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get global account by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/:global_account_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										":global_account_id"
									],
									"variable": [
										{
											"key": "global_account_id",
											"value": "{{global_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate global account statement - AMAZON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_statement_type\": \"AMAZON\",\n    \"registration_info\": {\n        \"agreement\": true,\n        \"registered_address\": {\n            \"address\": \"{{$randomStreetAddress}}\",\n            \"city\": \"{{$randomCity}}\",\n            \"country\": \"{{$randomCountry}}\",\n            \"postcode\": \"3000\",\n            \"state\": \"{{$randomCity}}\"\n        },\n        \"registered_email\": \"{{$randomExampleEmail}}\",\n        \"registered_name\": \"{{$randomFullName}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/:global_account_id/generate_statement_letter",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										":global_account_id",
										"generate_statement_letter"
									],
									"variable": [
										{
											"key": "global_account_id",
											"value": "{{global_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate global account statement - GENERAL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_statement_type\": \"GENERAL\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/:global_account_id/generate_statement_letter",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										":global_account_id",
										"generate_statement_letter"
									],
									"variable": [
										{
											"key": "global_account_id",
											"value": "{{global_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get global account transactions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/:global_account_id/transactions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										":global_account_id",
										"transactions"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "2021-12-21",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "2021-12-21T19:00:00+0800",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "global_account_id",
											"value": "{{global_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a global account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201\", function () {",
											"    //pm.response.to.have.status(201);",
											"    var json = JSON.parse(pm.response.text());",
											"    pm.environment.set(\"global_account_id\",json.id)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"country_code\": \"US\",\n    \"currency\": \"USD\",\n    \"nick_name\": \"My New Global Account\",\n    \"required_features\": [\n        {\n            \"currency\": \"USD\",\n            \"transfer_method\": \"LOCAL\"\n        },\n        {\n            \"currency\": \"USD\",\n            \"transfer_method\": \"SWIFT\"\n        }\n    ],\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										"create"
									]
								},
								"description": "Replace {country_code} and {currency} with supported actual country code and currency mentioned in Airwallex API Reference :-\n\n[https://www.airwallex.com/docs/api#/Core_Resources/Global_Accounts/_api_v1_global_accounts_create/post](https://www.airwallex.com/docs/api#/Core_Resources/Global_Accounts/_api_v1_global_accounts_create/post)\n\nGlobal Accounts can accept payments locally using LOCAL payment methods and internationally using SWIFT. Pass the required payment methods in payment_methods field."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":global_account_id\"))",
									"    return;",
									"",
									"let global_account_id = pm.environment.get(\"global_account_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof global_account_id === \"undefined\" || global_account_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/global_accounts\";",
									"    console.warn(`Environment variable 'global_account_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        active_global_account = res.json().items !== undefined ? res.json().items.find((x) => x.status === \"ACTIVE\") : undefined;",
									"        if (active_global_account !== undefined) {",
									"            console.info(`Defaulting 'global_account_id' to the first ACTIVE global account ${active_global_account.id}`);",
									"            pm.variables.set(\"global_account_id\", active_global_account.id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'global_account_id' is not set, and cannot set a default, as there is no ACTIVE global account returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Direct Debit LBA",
					"item": [
						{
							"name": "Get Linked Bank Accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Linked Bank Account by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts/:linked_account_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts",
										":linked_account_id"
									],
									"variable": [
										{
											"key": "linked_account_id",
											"value": "{{linked_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Linked Bank Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201\", function () {",
											"    //pm.response.to.have.status(201);",
											"    var json = JSON.parse(pm.response.text());",
											"    pm.environment.set(\"linked_account_id\",json.id)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\":\"US_BANK\",\n    \"us_bank\": {\n        \"account_name\": \"Connected Account Demo\",\n        \"account_number\": \"122356789\",//replace this with a sample bank account number\n        \"ach\": \"021000021\",//sample routing number\n        \"currency\": \"USD\",\n        \"entity_type\": \"BUSINESS\",\n        \"account_type\": \"CHECKING\"\n    },\n    \"preferred_verification_type\":\"MICRO_DEPOSIT\",\n    \"request_id\": \"{{$guid}}\"\n}  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Linked Account with micro-deposits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amounts\": [\n    0.01,\n    0.02\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts/:linked_account_id/verify_microdeposits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts",
										":linked_account_id",
										"verify_microdeposits"
									],
									"variable": [
										{
											"key": "linked_account_id",
											"value": "{{linked_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mandate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts/:linked_account_id/mandate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts",
										":linked_account_id",
										"mandate"
									],
									"variable": [
										{
											"key": "linked_account_id",
											"value": "{{linked_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Mandate for LBA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"signatory\": \"Tester Smith\",\n  \"type\": \"US_ACH_DEBIT\",\n  \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts/:linked_account_id/mandate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts",
										":linked_account_id",
										"mandate"
									],
									"variable": [
										{
											"key": "linked_account_id",
											"value": "{{linked_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Funding limits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/account_capabilities/funding_limits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"account_capabilities",
										"funding_limits"
									]
								}
							},
							"response": []
						}
					],
					"description": "Use Linked Accounts feature to link an external Bank Account with your Airwallex account to top up funds into your Airwallex account. API reference [https://www.airwallex.com/docs/api#/Core_Resources/Linked_Accounts/Intro](https://www.airwallex.com/docs/api#/Core_Resources/Linked_Accounts/Intro)"
				}
			]
		},
		{
			"name": "Transactional FX",
			"item": [
				{
					"name": "Quotes",
					"item": [
						{
							"name": "Create a quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"quote_id\", JSON.parse(responseBody).quote_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"buy_currency\": \"AUD\",\n    \"sell_amount\": 100,\n    \"sell_currency\": \"USD\",\n    \"validity\": \"MIN_1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/fx/quotes/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"fx",
										"quotes",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Conversion",
					"item": [
						{
							"name": "Create a conversion - buy_amount based",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"conversion_id\", JSON.parse(responseBody).conversion_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"buy_amount\": \"10000\",\n  \"buy_currency\": \"AUD\",\n  \"quote_id\": \"{{quote_id}}\",\n  \"reason\": \"For settling a payment\",\n  \"request_id\": \"{{$guid}}\",\n  \"sell_currency\": \"USD\",\n  \"term_agreement\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/fx/conversions/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"fx",
										"conversions",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a conversion - sell_amount based",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"conversion_id\", JSON.parse(responseBody).conversion_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"buy_currency\": \"AUD\",\n  \"reason\": \"For settling a payment\",\n  \"request_id\": \"{{$guid}}\",\n  \"sell_amount\": 10000,\n  \"sell_currency\": \"USD\",\n  \"term_agreement\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/fx/conversions/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"fx",
										"conversions",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve a specific conversion",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/fx/conversions/:conversion_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"fx",
										"conversions",
										":conversion_id"
									],
									"variable": [
										{
											"key": "conversion_id",
											"value": "{{conversion_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List conversions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/fx/conversions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"fx",
										"conversions"
									],
									"query": [
										{
											"key": "buy_currency",
											"value": "",
											"description": "Currency that the client bought (in 3-letter ISO-4217 format).",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The starting value for specifying a date range for results to be returned. The date range is specific to conversion creation (a conversion’s created_at date). Specify a starting created_at date (in ISO-8601 format). This starting date is inclusive of the range.",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "",
											"description": "Client-supplied conversion request_id (idempotency key).",
											"disabled": true
										},
										{
											"key": "sell_currency",
											"value": "",
											"description": "Currency that the client sold (in 3-letter ISO-4217 format).",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the conversion. Can be one of AWAITING_FUNDS,CANCELLED,PENDING_SETTLEMENT,SETTLED,ROLLOVER_REQUESTED,PENDING_ROLLOVER.",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The ending value for specifying a date range for results to be returned. The date range is specific to conversion creation (a conversion’s created_at date). Specify an ending created_at date (in ISO-8601 format). This ending date is inclusive of the range.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":conversion_id\"))",
									"    return;",
									"",
									"let conversion_id = pm.environment.get(\"conversion_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof conversion_id === \"undefined\" || conversion_id === \"\") {",
									"    let baseUrl = pm.environment.get(\"url\") === undefined ? pm.collectionVariables.get(\"url\") : pm.environment.get(\"url\");",
									"    request_url = baseUrl + \"/api/v1/conversions\";",
									"    console.warn(`Environment variable 'conversion_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().length > 0) {",
									"            console.info(`Defaulting 'conversion_id' to the first transaction ${res.json()[0].conversion_id}`);",
									"            pm.variables.set(\"conversion_id\", res.json()[0].conversion_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'conversion_id' is not set, and cannot set a default, as there is no conversion returned.\");",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Conversion Amendments",
					"item": [
						{
							"name": "Create an amendment quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"conversion_id\": \"{{conversion_id}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"type\": \"CANCEL\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/fx/conversion_amendments/quote",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"fx",
										"conversion_amendments",
										"quote"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rates",
					"item": [
						{
							"name": "Retrieve a current rate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/fx/rates/current?buy_currency=AUD&sell_currency=CNY&buy_amount=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"fx",
										"rates",
										"current"
									],
									"query": [
										{
											"key": "buy_currency",
											"value": "AUD",
											"description": "Currency (3-letter ISO-4217 code) the client buys"
										},
										{
											"key": "sell_currency",
											"value": "CNY",
											"description": "Currency (3-letter ISO-4217 code) the client sells. This is the currency you will need to send us by the settlement cutoff time"
										},
										{
											"key": "buy_amount",
											"value": "100",
											"description": "Amount the client buys in buy_currency (must be blank if sell_amount is specified)"
										},
										{
											"key": "conversion_date",
											"value": "",
											"disabled": true
										},
										{
											"key": "sell_amount",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearer_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/************************************************",
					" * This collection pre-request script runs before the request one.",
					" ***********************************************/",
					"",
					"// Set API version",
					"if (typeof pm.environment.get(\"apiVersion\") !== 'undefined')",
					"    pm.request.headers.add({key: \"x-api-version\", value: pm.environment.get(\"apiVersion\")});",
					"",
					"// Global variables and functions",
					"BASE_URL = pm.variables.get(\"url\");",
					"",
					"UTILITY = {",
					"    getRequestHeader: function () {",
					"        let headers_json = { \"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\") };",
					"",
					"        if (typeof pm.environment.get(\"apiVersion\") !== 'undefined')",
					"            headers_json[\"x-api-version\"] = pm.environment.get(\"apiVersion\");",
					"",
					"        if (pm.request.headers.find((x) => x.key === \"x-on-behalf-of\") === undefined) {",
					"            throw Error(\"Missing 'x-on-behalf-of' in the HTTP Header.\")",
					"        }",
					"        else if (pm.request.headers.find((x) => x.key === \"x-on-behalf-of\" && x.disabled === true)) {",
					"            return headers_json;",
					"        }",
					"        else {",
					"            let connectedAccountId = pm.request.headers.find((x) => x.key === \"x-on-behalf-of\").value;",
					"            connectedAccountId = connectedAccountId === \"{{connected_account_id}}\" ? pm.environment.get(\"connected_account_id\") : connectedAccountId;",
					"",
					"            headers_json[\"x-on-behalf-of\"] = connectedAccountId;",
					"            return headers_json;",
					"        }",
					"    }",
					"};",
					"",
					"// Initialize environment variables. ",
					"if (typeof pm.environment.get(\"connected_account_id\") === 'undefined')",
					"    pm.environment.set(\"connected_account_id\", \"\");",
					"",
					"// Test the bearer_token expiry.",
					"if (\"/\" + pm.request.url.path.join(\"/\") === \"/api/v1/authentication/login\")",
					"    return;",
					"",
					"let loginUrl = BASE_URL + \"/api/v1/authentication/login\";",
					"console.info(`bearer_token invalid, calling ${loginUrl} to refresh...`);",
					"",
					"// Obtain access token, before each request.",
					"let clientId = pm.variables.get(\"clientId\");",
					"let apiKey = pm.variables.get(\"apiKey\");",
					"",
					"if (clientId === \"\" || apiKey === \"\") {",
					"    throw new Error(\"Please set the values for the variables 'clientId' or 'apiKey'.\");",
					"}",
					"",
					"pm.sendRequest({",
					"    url: loginUrl,",
					"    method: \"POST\",",
					"    header: {",
					"        \"x-client-id\": clientId,",
					"        \"x-api-key\": apiKey",
					"    }",
					"}, function (err, res) {",
					"    pm.environment.set(\"bearer_token_expires_at\", res.json().expires_at);",
					"    pm.environment.set(\"bearer_token\", res.json().token);",
					"",
					"    // pm.sendRequest() is asynchronous, so only execute the function after the bearer_token is set.",
					"    executeWithValidBearerToken(BASE_URL);",
					"});",
					"",
					"// Encode query parameters, e.g. 2021-12-21T18:50:00+08:00 -> 2021-12-21T18%3A50%3A00%2B08%3A00.",
					"pm.request.url.query.filter((x) => x.disabled === undefined).forEach((x) => x.value = encodeURIComponent(x.value));",
					"",
					"function executeWithValidBearerToken(baseUrl) {",
					"    if (pm.environment.get(\"connected_account_id\") === \"\") {",
					"        if (pm.request.headers.find((x) => x.key === \"x-on-behalf-of\" && (x.disabled === undefined || x.disabled === false))) {",
					"            request_url = baseUrl + \"/api/v1/accounts\";",
					"            console.warn(`HTTP Header 'x-on-behalf-of' is on, but the environment variable 'connected_account_id' is not set, calling ${request_url} to default it.`);",
					"",
					"            pm.sendRequest({",
					"                url: request_url,",
					"                method: \"GET\",",
					"                header: { \"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\") }",
					"            }, function (err, res) {",
					"                active_account = res.json().items.find((x) => x.status === \"ACTIVE\");",
					"                if (active_account != undefined) {",
					"                    console.info(`Defaulting 'connected_account_id' to the first ACTIVE account ${active_account.id}`);",
					"                    pm.environment.set(\"connected_account_id\", active_account.id);",
					"                }",
					"                else {",
					"                    throw new Error(\"Environment variable 'connected_account_id' is not set, and cannot set a default, as there is no ACTIVE account returned.\");",
					"                }",
					"            });",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "clientId",
			"value": ""
		},
		{
			"key": "apiKey",
			"value": ""
		},
		{
			"key": "url",
			"value": "https://api-demo.airwallex.com"
		},
		{
			"key": "file_url",
			"value": "https://files-demo.airwallex.com"
		}
	]
}